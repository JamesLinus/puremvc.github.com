Ext.data.JsonP.puremvc({"statics":{"cfg":[],"property":[],"css_var":[],"event":[],"css_mixin":[],"method":[]},"files":[{"filename":"","href":""}],"html":"<div><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-declare' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='puremvc'>puremvc</span><br/><a href='source/oop.html#puremvc-method-declare' target='_blank' class='view-source'>view source</a></div><a href='#!/api/puremvc-method-declare' class='name expandable'>declare</a>( <span class='pre'>string string, [Object object], [Object scope]</span> ) : Object</div><div class='description'><div class='short'>Declare a namespace and optionally make an Object the referent\nof that namespace. ...</div><div class='long'><p>Declare a namespace and optionally make an Object the referent\nof that namespace.</p>\n\n<pre><code>console.assert(null == window.tld, 'No tld namespace');\n// declare the tld namespace\npuremvc.declare('tld');\nconsole.assert('object' === typeof tld, 'The tld namespace was declared');\n\n// the method returns a reference to last namespace node in a created hierarchy\nvar reference= puremvc.declare('tld.domain.app');\nconsole.assert(reference === tld.domain.app)\n\n// of course you can also declare your own objects as well\nvar AppConstants=\n    {\n           APP_NAME: 'tld.domain.app.App'\n    };\n\npuremvc.declare('tld.domain.app.AppConstants', AppConstants);\nconsole.assert(AppConstants === tld.domain.app.AppConstants\n   , 'AppConstants was exported to the namespace');\n</code></pre>\n\n<p>Note that you can also <a href=\"#!/api/puremvc-method-declare\" rel=\"puremvc-method-declare\" class=\"docClass\">declare</a> within a closure. That way you\ncan selectively export Objects to your own namespaces without\nleaking variables into the global scope.</p>\n\n<pre><code>(function(){\n    // this var is not accessible outside of this\n    // closures call scope\n    var hiddenValue= 'defaultValue';\n\n    // export an object that references the hidden\n    // variable and which can mutate it\n    puremvc.declare\n    (\n         'tld.domain.app.backdoor'\n\n    ,    {\n             setValue: function (value)\n             {\n                 // assigns to the hidden var\n                 hiddenValue= value;\n             }\n\n    ,        getValue: function ()\n             {\n                 // reads from the hidden var\n                 return hiddenValue;\n             }\n         }\n    );\n})();\n// indirectly retrieve the hidden variables value\nconsole.assert('defaultValue' === tld.domain.app.backdoor.getValue());\n// indirectly set the hidden variables value\ntld.domain.app.backdoor.setValue('newValue');\n// the hidden var was mutated\nconsole.assert('newValue' === tld.domain.app.backdoor.getValue());\n</code></pre>\n\n<p>On occasion, primarily during testing, you may want to use declare,\nbut not have the global object be the namespace root. In these cases you\ncan supply the optional third scope argument.</p>\n\n<pre><code>var localScope= {}\n,   object= {}\n\npuremvc.declare('mock.object', object, localScope);\n\nconsole.assert(null == window.mock, 'mock namespace is not in global scope');\nconsole.assert(object === localScope.mock.object, 'mock.object is available in localScope');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : string<div class='sub-desc'><p>A qualified object name, e.g. 'com.example.Class'</p>\n</div></li><li><span class='pre'>object</span> : Object (optional)<div class='sub-desc'><p>An object to make the referent of the namespace.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The namespace's root node. If not supplied, the global\n scope will be namespaces root node.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A reference to the last node of the Object hierarchy created.</p>\n</div></li></ul></div></div></div><div id='method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='puremvc'>puremvc</span><br/><a href='source/oop.html#puremvc-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/puremvc-method-define' class='name expandable'>define</a>( <span class='pre'>[Object classinfo], [Object traits], [Object staitcTraits]</span> ) : Function</div><div class='description'><div class='short'>Define a new classlet. ...</div><div class='long'><p>Define a new classlet. Current editions of JavaScript do not have classes,\nbut they can be emulated, and this method does this for you, saving you\nfrom having to work with Function prototype directly. The method does\nnot extend any Native objects and is entirely opt in. Its particularly\nusefull if you want to make your PureMvc applications more portable, by\ndecoupling them from a specific OOP abstraction library.</p>\n\n<pre><code>puremvc.define\n(\n    // the first object supplied is a class descriptor. None of these\n    // properties are added to your class, the exception being the\n    // constructor property, which if supplied, will be your classes\n    // constructor.\n    {\n        // your classes namespace- if supplied, it will be \n        // created for you\n        name: 'com.example.UserMediator'\n\n        // your classes parent class. If supplied, inheritance \n        // will be taken care of for you\n    ,   parent: puremvc.Mediator\n\n        // your classes constructor. If not supplied, one will be \n        // created for you\n    ,   constructor: function UserMediator (component)\n        {\n             puremvc.Mediator.call(this, this.constructor.NAME, component);  \n        }\n    }\n\n    // the second object supplied defines your class traits, that is\n    // the properties that will be defined on your classes prototype\n    // and thereby on all instances of this class\n,   {\n        businessMethod: function ()\n        {\n            // impl \n        }\n    }\n\n    // the third object supplied defines your classes 'static' traits\n    // that is, the methods and properties which will be defined on\n    // your classes constructor\n,   {\n        NAME: 'userMediator'\n    }\n);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classinfo</span> : Object (optional)<div class='sub-desc'><p>An object describing the class. This object can have any or all of\n the following properties:</p>\n\n<ul>\n<li><p>name: String<br/>\n  The classlets name. This can be any arbitrary qualified object\n  name. 'com.example.Classlet' or simply 'MyClasslet' for example\n  The method will automatically create an object hierarchy refering\n  to your class for you. Note that you will need to capture the\n  methods return value to retrieve a reference to your class if the\n  class name property is not defined.</p></li>\n<li><p>parent: Function\n  The classlets 'superclass'. Your class will be extended from this\n  if supplied.</p></li>\n<li><p>constructor: Function\n  The classlets constructor. Note this is <em>not</em> a post construct\n  initialize method, but your classes constructor Function.\n  If this attribute is not defined, a constructor will be created for\n  you automatically. If you have supplied a parent class\n  value and not defined the classes constructor, the automatically\n  created constructor will invoke the super class constructor\n  automatically. If you have supplied your own constructor and you\n  wish to invoke it's super constructor, you must do this manually, as\n  there is no reference to the classes parent added to the constructor\n  prototype.</p></li>\n<li><p>scope: Object.\n  For use in advanced scenarios. If the name attribute has been supplied,\n  this value will be the root of the object hierarchy created for you.\n  Use it do define your own class hierarchies in private scopes,\n  accross iFrames, in your unit tests, or avoid collision with third\n  party library namespaces.</p></li>\n</ul>\n\n</div></li><li><span class='pre'>traits</span> : Object (optional)<div class='sub-desc'><p>An Object, the properties of which will be added to the\n class constructors prototype.</p>\n</div></li><li><span class='pre'>staitcTraits</span> : Object (optional)<div class='sub-desc'><p>An Object, the properties of which will be added directly\n to this class constructor</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>A reference to the classlets constructor</p>\n</div></li></ul></div></div></div></div></div></div></div>","component":false,"superclasses":[],"mixedInto":[],"mixins":[],"members":{"property":[],"cfg":[],"css_var":[],"css_mixin":[],"event":[],"method":[{"owner":"puremvc","meta":{},"name":"declare","id":"method-declare","tagname":"method"},{"owner":"puremvc","meta":{},"name":"define","id":"method-define","tagname":"method"}]},"allMixins":[],"meta":{},"name":"puremvc","alternateClassNames":[],"aliases":{},"html_meta":{},"tagname":"class","subclasses":[]});