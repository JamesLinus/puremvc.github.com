PureMVC AS3 Utility - State Machine 
Copyright (c) 2007-2008, Neil Manuell <neil.manuell@puremvc.org>
and Cliff Hall <cliff.hall@puremvc.org>
Your reuse is governed by the Creative Commons Attribution 3.0 License
--------------------------------------------------------------------------
Release Date: 02/27/09
    Platform: ActionScript 3 
     Version: 1 
    Revision: 1
     Authors: Neil Manuell <neil.manuell@puremvc.org>
            : Cliff Hall <cliff.hall@puremvc.org>
     License: Creative Commons Attribution 3.0 United States License
--------------------------------------------------------------------------
1.1 Added reentrant state capability, 'changed' notification for individual
    states, and a data parameter sent in the body of any StateMachine.ACTION
    notification will be passed out as the body of the 'exiting','entering', 
    'changed', notifications configured for the current and next state. - CLH
    
1.0 First release on PureMVC.org. 

    Finite State Machine Implementation
    -----------------------------------
    A StateMachine class, which extends Mediator and maintains the 
    FSM representation as a set of discrete, named States. This Mediator is 
    interested in StateMachine.ACTION and StateMachine.CANCEL notifications.
    It exposes methods for regsistering and removing States. 
    
    State Representation
    --------------------
    The States held and navigated by the StateMachine are instances of a 
    State class, which carries several critical pieces of information about
    that State.
     
    Each State has optional associated Notifications to be sent on entry into 
    the State and exit from the State. 
    
	The exiting notification carries a reference in the body to the State 
	that we are transitioning to. This helps actors respond properly by 
	anticipating the destination state. 
	
	The entering notification for a State carries a reference in the body
	to the state we are entering as well, in case you've subclassed State
	to pass data.    
	
	It is up to the programmer to define and register commands or mediators
	with interest in these entering and exiting notifications, the state
	machine simply sends them at the appropriate times.
	
    The State class also exposes methods for defining and removing 
    transitions. A transition simply maps an action name to a target 
    State name. 
    
    State Transitions
    -----------------
    The transition from one state to the next is triggered by any actor 
    sending a StateMachine.ACTION Notification. Include the name of 
    the action in the Notification's type parameter.
     
    Actions are what trigger the StateMachine to initiate the transition 
    from the one State to the next. There is no formal Action class at 
    this time, it is merely a name that will trigger a State transition.
             
    It is up to the application to ensure any special conditions for making 
    the transition are met before sending the StateMachine.ACTION Notification, 
    which will initiate the transition immediately if one is defined for the 
    input action given the current State.  
      
    Any actor responding to the Notification sent when exiting a state may 
    send a StateMachine.CANCEL notification, which will cause the StateMachine 
    not to enter the next State.  The programmer  must insure that no other 
    responses to the current State's exit notification need to be rolled back. 
    This is best done by checking any items that could lead to a 
    StateMachine.CANCEL being sent before initiating any exit activity such 
    as visual transitions or form clearing/population, thus avoiding the need 
    to rollback to restore the application to the state being exited.  
    
    Finally, when a transition is complete, the StateMachine sends a 
    StateMachine.CHANGED Notification, with a reference to the new State. This
    is sent once any exiting notification for the previous state, as well as 
    any entering notification for the new state have both been exectuted, and
    the current state of the StateMachine has been updated to the new state.
     
    
    FSM Injector
    ------------
    Also included in this release is useful class that allows you to define 
    your FSM in an XML format, and pass it to the FSMInjector where it will
    be parsed, and a fully populated StateMachine instance will be created
    and registered via your Facade. 
     
    The FSMInjector extends Notifier to give it a reference to the Facade 
    for injecting the completed StateMachine.
    
    The XML format for the FSM Injector is simple. For instance here is
    the FSM for a door:
    
    <fsm initial="CLOSED">
		<state name="OPENED" entering="openingNote" exiting="aboutToCloseNote">
			<transition action="CLOSE" target="CLOSED"/>
		</state>
		<state name="CLOSED" entering="closingNote">
			<transition action="OPEN" target="OPENED"/>
			<transition action="LOCK" target="UNLOCKED"/>
		</state>
		<state name="LOCKED" entering="lockingNote">
			<transition action="UNLOCK" target="CLOSED"/>
		</state>
	</fsm>
	
	The above FSM defines three discrete states OPENED, CLOSED and LOCKED. 
	
	The actions OPEN, CLOSE and LOCK are used to trigger state transitions. 
	
	It is only possible to LOCK the door when it is CLOSED, because
	only the CLOSED state defines a transition targeting the LOCKED state.
	
	It is not possible to OPEN the door from the LOCKED state because no
	transition is defined targeting the OPEN state. 
	
	And when you UNLOCK the door, it returns to the CLOSED state, where it
	is once again possible to OPEN or LOCK.
	
	An exiting notification is defined only for exiting the OPEN state to 
	illustrate that entering and exiting notifications are optional. 
	