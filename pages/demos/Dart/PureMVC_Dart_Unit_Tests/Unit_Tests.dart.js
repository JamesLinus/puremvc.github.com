// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DateImplementation = {"":
 ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 hashCode$0: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1 = new $.DateImplementation_toString_fourDigits();
  var t2 = new $.DateImplementation_toString_threeDigits();
  var t3 = new $.DateImplementation_toString_twoDigits();
  var y = t1.call$1(this.get$year());
  var m = t3.call$1(this.get$month());
  var d = t3.call$1(this.get$day());
  var h = t3.call$1(this.get$hour());
  var min = t3.call$1(this.get$minute());
  var sec = t3.call$1(this.get$second());
  var ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  return $.Date_Date$fromMillisecondsSinceEpoch($.add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 DateImplementation$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.abs(t1), 8640000000000000))
    throw $.$$throw($.IllegalArgumentException$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.IllegalArgumentException$(t1));
},
 DateImplementation$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true
};

$$.ExceptionImplementation = {"":
 ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FutureImpl = {"":
 ["_isComplete", "_lib0_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw(t1);
  return this._lib0_value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw(this._exception);
},
 handleException$1: function(onException) {
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete === true) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _lib0_complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); t1.hasNext$0() === true;) {
        var handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.hasNext$0() === true;) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && $.gtB($.get$length(this._successListeners), 0))
      throw $.$$throw(this._exception);
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.hasNext$0() === true;) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete === true)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._lib0_value = value;
  this._lib0_complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.IllegalArgumentException$(null));
  if (this._isComplete === true)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._lib0_complete$0();
}
};

$$.CompleterImpl = {"":
 ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.HashMapImplementation = {"":
 ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1 = $.hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0, 0);
  var t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t1, t3, 0, 0);
  var hash = (t1 & t3 - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._probeForAdding$1$bailout(3, key, hash, numberOfProbes, insertionIndex, t1);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC18 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(4, numberOfProbes0, key, insertionIndex, hash, 0);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      key = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      key = env0;
      hash = env1;
      numberOfProbes = env2;
      insertionIndex = env3;
      t1 = env4;
      break;
    case 4:
      numberOfProbes0 = env0;
      key = env1;
      insertionIndex = env2;
      hash = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.hashCode(key);
    case 1:
      state = 0;
      var t3 = $.get$length(this._keys);
    case 2:
      state = 0;
      var hash = $.and(t1, $.sub(t3, 1));
      var numberOfProbes = 1;
      var insertionIndex = -1;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
            case 3:
              state = 0;
              var existingKey = $.index(t1, hash);
              if (existingKey == null) {
                if ($.ltB(insertionIndex, 0))
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if ($.ltB(insertionIndex, 0) && $.CTC18 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = numberOfProbes + 1;
              hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
            case 4:
              state = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash = $.and($.hashCode(key), $.sub($.get$length(this._keys), 1));
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1$bailout: function(state, key, hash) {
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  var numberOfFree = $.sub($.sub($.get$length(this._keys), newNumberOfEntries), this._numberOfDeleted);
  if ($.gtB(this._numberOfDeleted, numberOfFree))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  var capacity = $.get$length(this._keys);
  if (typeof capacity !== 'number')
    return this._grow$1$bailout(1, newCapacity, capacity, 0, 0);
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  var oldKeys = this._keys;
  if (typeof oldKeys !== 'string' && (typeof oldKeys !== 'object' || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(2, newCapacity, oldKeys, capacity, 0);
  var oldValues = this._values;
  if (typeof oldValues !== 'string' && (typeof oldValues !== 'object' || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
  this._keys = $.ListImplementation_List(newCapacity);
  this._values = $.ListImplementation_List(newCapacity);
  for (var i = 0; i < capacity; ++i) {
    if (i < 0 || i >= oldKeys.length)
      throw $.ioore(i);
    var key = oldKeys[i];
    if (key == null || key === $.CTC18)
      continue;
    if (i < 0 || i >= oldValues.length)
      throw $.ioore(i);
    var value = oldValues[i];
    var newIndex = this._probeForAdding$1(key);
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var newCapacity = env0;
      capacity = env1;
      break;
    case 2:
      newCapacity = env0;
      oldKeys = env1;
      capacity = env2;
      break;
    case 3:
      newCapacity = env0;
      oldKeys = env1;
      oldValues = env2;
      capacity = env3;
      break;
  }
  switch (state) {
    case 0:
      var capacity = $.get$length(this._keys);
    case 1:
      state = 0;
      this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
      var oldKeys = this._keys;
    case 2:
      state = 0;
      var oldValues = this._values;
    case 3:
      state = 0;
      this._keys = $.ListImplementation_List(newCapacity);
      this._values = $.ListImplementation_List(newCapacity);
      for (var i = 0; $.ltB(i, capacity); ++i) {
        var key = $.index(oldKeys, i);
        if (key == null || key === $.CTC18)
          continue;
        var value = $.index(oldValues, i);
        var newIndex = this._probeForAdding$1(key);
        $.indexSet(this._keys, newIndex, key);
        $.indexSet(this._values, newIndex, value);
      }
      this._numberOfDeleted = 0;
  }
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.clear$0$bailout(1, length$);
  for (var i = 0; i < length$; ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state, length$) {
  for (var i = 0; $.ltB(i, length$); ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = this._probeForAdding$1(key);
  var t1 = this._keys;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$indexSet$2$bailout(1, key, value, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  if (!(t1[index] == null)) {
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    var t2 = t1[index] === $.CTC18;
    t1 = t2;
  } else
    t1 = true;
  if (t1) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.operator$indexSet$2$bailout(3, key, value, t1, index);
    this._numberOfEntries = t1 + 1;
  }
  t1 = this._keys;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(4, key, value, t1, index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(5, value, t1, index, 0);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$indexSet$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var key = env0;
      var value = env1;
      index = env2;
      t1 = env3;
      break;
    case 2:
      key = env0;
      value = env1;
      index = env2;
      t1 = env3;
      break;
    case 3:
      key = env0;
      value = env1;
      t1 = env2;
      index = env3;
      break;
    case 4:
      key = env0;
      value = env1;
      t1 = env2;
      index = env3;
      break;
    case 5:
      value = env0;
      t1 = env1;
      index = env2;
      break;
  }
  switch (state) {
    case 0:
      this._ensureCapacity$0();
      var index = this._probeForAdding$1(key);
      var t1 = this._keys;
    case 1:
      state = 0;
    case 2:
      if (state === 2 || state === 0 && !($.index(t1, index) == null))
        switch (state) {
          case 0:
            t1 = this._keys;
          case 2:
            state = 0;
            var t3 = $.index(t1, index) === $.CTC18;
            t1 = t3;
        }
      else
        t1 = true;
    case 3:
      if (state === 3 || state === 0 && t1)
        switch (state) {
          case 0:
            t1 = this._numberOfEntries;
          case 3:
            state = 0;
            this._numberOfEntries = $.add(t1, 1);
        }
      t1 = this._keys;
    case 4:
      state = 0;
      $.indexSet(t1, index, key);
      t1 = this._values;
    case 5:
      state = 0;
      $.indexSet(t1, index, value);
  }
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    var value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC18);
    this._numberOfDeleted = $.add(this._numberOfDeleted, 1);
    return value;
  }
  return;
},
 isEmpty$0: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.forEach$1$bailout(1, f, length$);
  for (var i = 0; i < length$; ++i) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC18))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.ltB(i, length$); ++i) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC18))
      f.call$2(key, $.index(this._values, i));
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  var t1 = this._probeForLookup$1(key);
  if (typeof t1 !== 'number')
    return this.containsKey$1$bailout(1, t1);
  return !(t1 === -1);
},
 containsKey$1$bailout: function(state, t1) {
  return !$.eqB(t1, -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  this._values = $.ListImplementation_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"":
 [],
 "super": "Object"
};

$$.KeyValuePair = {"":
 ["key?", "value="],
 "super": "Object"
};

$$.LinkedHashMapImplementation = {"":
 ["_lib0_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  var t1 = this._map;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(1, key, value, t1);
  if (t1.containsKey$1(key) === true) {
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key].get$element().set$value(value);
  } else {
    var t2 = this._lib0_list;
    $.addLast(t2, $.KeyValuePair$(key, value));
    t2 = t2.lastEntry$0();
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = t2;
  }
},
 operator$indexSet$2$bailout: function(state, key, value, t1) {
  if (t1.containsKey$1(key) === true)
    $.index(t1, key).get$element().set$value(value);
  else {
    var t2 = this._lib0_list;
    $.addLast(t2, $.KeyValuePair$(key, value));
    $.indexSet(t1, key, t2.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_1 = 0;
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_10 = 0;
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_getValues__(list, t1));
  return list;
},
 forEach$1: function(f) {
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._lib0_list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.HashMapImplementation$();
  this._lib0_list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"":
 ["_previous=", "_next=", "_lib0_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._lib0_element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._lib0_element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._lib0_element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"":
 ["_previous", "_next", "_lib0_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC17);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC17);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"":
 ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection); t1.hasNext$0() === true;)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 first$0: function() {
  return this._sentinel.get$_next().get$element();
},
 get$first: function() { return new $.BoundClosure(this, 'first$0'); },
 last$0: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 isEmpty$0: function() {
  var t1 = this._sentinel;
  var t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    f.call$1(entry.get$_lib0_element());
    entry = nextEntry;
  }
},
 map$1: function(f) {
  var other = $.Queue_Queue();
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    $.addLast(other, f.call$1(entry.get$_lib0_element()));
    entry = nextEntry;
  }
  return other;
},
 filter$1: function(f) {
  var other = $.Queue_Queue();
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_lib0_element()) === true)
      $.addLast(other, entry.get$_lib0_element());
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":
 ["_sentinel", "_currentEntry"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._currentEntry.get$_next();
  var t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC10);
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.JSSyntaxRegExp = {"":
 ["_ignoreCase", "_multiLine", "_lib0_pattern"],
 "super": "Object",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true
};

$$.StringBufferImpl = {"":
 ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 isEmpty$0: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator(objects); t1.hasNext$0() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $.ListImplementation_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.stringJoinUnchecked($.StringImplementation__toJsStringArray(this._buffer), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.Duration = {"":
 ["inMilliseconds?"],
 "super": "Object",
 get$inHours: function() {
  return $.tdiv(this.inMilliseconds, 3600000);
},
 get$inMinutes: function() {
  return $.tdiv(this.inMilliseconds, 60000);
},
 get$inSeconds: function() {
  return $.tdiv(this.inMilliseconds, 1000);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Duration))
    return false;
  return this.inMilliseconds === other.inMilliseconds;
},
 hashCode$0: function() {
  return $.hashCode(this.inMilliseconds);
},
 toString$0: function() {
  var t1 = new $.Duration_toString_threeDigits();
  var t2 = new $.Duration_toString_twoDigits();
  var t3 = this.inMilliseconds;
  if (t3 < 0)
    return '-' + $.S($.Duration$(0, 0, 0, 0, -t3));
  var twoDigitMinutes = t2.call$1($.remainder(this.get$inMinutes(), 60));
  var twoDigitSeconds = t2.call$1($.remainder(this.get$inSeconds(), 60));
  var threeDigitMs = t1.call$1($.remainder(t3, 1000));
  return $.S(this.get$inHours()) + ':' + $.S(twoDigitMinutes) + ':' + $.S(twoDigitSeconds) + '.' + $.S(threeDigitMs);
},
 is$Duration: true
};

$$.NoSuchMethodError = {"":
 ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.StringBuffer_StringBuffer('');
  for (var t1 = this._arguments, i = 0; i < t1.length; ++i) {
    if (i > 0)
      $.add$1(sb, ', ');
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, $.NoSuchMethodError_safeToString(t1[i]));
  }
  t1 = this._existingArgumentNames;
  if (t1 == null)
    return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(sb) + ']';
  else {
    var actualParameters = $.toString(sb);
    sb = $.StringBuffer_StringBuffer('');
    for (i = 0; $.ltB(i, $.get$length(t1)); ++i) {
      if (i > 0)
        $.add$1(sb, ', ');
      $.add$1(sb, $.index(t1, i));
    }
    var formalParameters = $.toString(sb);
    t1 = this._functionName;
    return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
  }
}
};

$$.IndexOutOfRangeException = {"":
 ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true
};

$$.ObjectNotClosureException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Object is not closure';
},
 is$Exception: true
};

$$.IllegalArgumentException = {"":
 ["_arg"],
 "super": "Object",
 toString$0: function() {
  return 'Illegal argument(s): ' + $.S(this._arg);
},
 is$Exception: true
};

$$.StackOverflowException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
},
 is$Exception: true
};

$$.NullPointerException = {"":
 ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.NoMoreElementsException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true
};

$$.EmptyQueueException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true
};

$$.UnsupportedOperationException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  return 'UnsupportedOperationException: ' + this._message;
},
 is$Exception: true
};

$$.NotImplementedException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"":
 ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"":
 ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.ExpectException = {"":
 ["message?"],
 "super": "Object",
 toString$0: function() {
  return this.message;
},
 is$ExpectException: true,
 is$Exception: true
};

$$.FutureNotCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.Object = {"":
 [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 hashCode$0: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.ListIterator = {"":
 ["i", "list"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this.i;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1);
  return t1 < this.list.length;
},
 hasNext$0$bailout: function(state, t1) {
  return $.lt(t1, this.list.length);
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  var t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout: function(state, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.StackTrace = {"":
 ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true
};

$$.MetaInfo = {"":
 ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.Unit_Tests = {"":
 [],
 "super": "Object",
 onTestResult$1: function(testCase) {
  this.write$1($.S(testCase.result) + '  ' + $.S(testCase.currentGroup));
},
 write$1: function(message) {
  $.document().query$1('#status').set$innerHTML(message);
},
 run$0: function() {
  $.Test_Notification$().run$0();
  $.Test_Observer$().run$0();
  $.Test_SimpleCommand$().run$0();
  $.Test_MacroCommand$().run$0();
  $.Test_Proxy$().run$0();
  $.Test_Mediator$().run$0();
  $.Test_Model$().run$0();
  $.Test_View$().run$0();
  $.Test_Controller$().run$0();
  $.Test_Facade$().run$0();
},
 Unit_Tests$0: function() {
  $.configure($.Unit_Tests_Config$());
}
};

$$.Unit_Tests_Config = {"":
 ["currentTestCase"],
 "super": "Configuration",
 onInit$0: function() {
  this.writeStatus$1('Unit Test Framework Started...');
},
 onStart$0: function() {
  this.writeStatus$1('Unit Tests for the PureMVC MultiCore Framework for Dart');
},
 onTestResult$1: function(testCase) {
  this.appendRow$1('<TR><TH BGCOLOR=' + ($.eqB(testCase.result, 'pass') ? '33FF00' : 'FF3333') + '>' + $.S(testCase.result) + '</TH><TD COLSPAN=\'3\'>' + $.S(testCase.description) + '</TD></TR>');
  $.Configuration.prototype.onTestResult$1.call(this, testCase);
},
 onDone$5: function(passed, failed, errors, results, uncaughtError) {
  this.writeResult$1('<TH COLSPAN=\'4\' ALIGN=\'left\' BGCOLOR=' + (failed === 0 ? '33FF00' : 'FF3333') + '>PASSED: ' + $.S(passed) + ' ... FAILED: ' + $.S(failed) + '</TH>');
},
 writeStatus$1: function(message) {
  $.document().query$1('#status').set$innerHTML(message);
},
 appendRow$1: function(tableRow) {
  var t1 = $.S($.document().query$1('#outputTable').get$innerHTML()) + tableRow;
  $.document().query$1('#outputTable').set$innerHTML(t1);
},
 writeResult$1: function(result) {
  $.document().query$1('#result').set$innerHTML(result);
}
};

$$.Test_Notification = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('Notification', new $.Test_Notification__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.Test_Observer = {"":
 ["observerTestNote?"],
 "super": "Object",
 _tests$0: function() {
  $.group('Observer', new $.Test_Observer__tests_anon(this));
},
 observerTestMethod$1: function(note) {
  this.observerTestNote = note;
},
 get$observerTestMethod: function() { return new $.BoundClosure0(this, 'observerTestMethod$1'); },
 run$0: function() {
  this._tests$0();
}
};

$$.Test_SimpleCommand = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('SimpleCommand', new $.Test_SimpleCommand__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.SimpleCommandTestVO = {"":
 ["input?", "result="],
 "super": "Object"
};

$$.SimpleCommandTestDoubleInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  vo.set$result(2 * t1);
}
};

$$.Test_MacroCommand = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('MacroCommand', new $.Test_MacroCommand__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.MacroCommandTestVO = {"":
 ["input?", "doubled!", "squared!"],
 "super": "Object"
};

$$.MacroCommandTestCommand = {"":
 ["subCommands", "multitonKey"],
 "super": "MacroCommand",
 initializeMacroCommand$0: function() {
  this.addSubCommand$1(new $.MacroCommandTestCommand_initializeMacroCommand_anon());
  this.addSubCommand$1(new $.MacroCommandTestCommand_initializeMacroCommand_anon0());
}
};

$$.MacroCommandTestDoubleInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$doubled(t1 * 2);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$doubled($.mul(t1, 2));
}
};

$$.MacroCommandTestSquareInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$squared(t1 * t1);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$squared($.mul(t1, t1));
}
};

$$.Test_Proxy = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('ProxyTest', new $.Test_Proxy__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.Test_Mediator = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('Mediator', new $.Test_Mediator__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.Test_Model = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('Model', new $.Test_Model__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.ModelTestProxy = {"":
 ["name", "data", "multitonKey"],
 "super": "Proxy",
 onRegister$0: function() {
  this.setData$1($.ModelTestProxy_ON_REGISTER_CALLED);
},
 onRemove$0: function() {
  this.setData$1($.ModelTestProxy_ON_REMOVE_CALLED);
},
 ModelTestProxy$0: function() {
  this.setData$1($.ModelTestProxy_FRESH);
}
};

$$.Test_View = {"":
 ["viewTestVar?"],
 "super": "Object",
 _tests$0: function() {
  $.group('ViewTest', new $.Test_View__tests_anon(this));
},
 viewTestMethod$1: function(note) {
  this.viewTestVar = note.getName$0();
},
 get$viewTestMethod: function() { return new $.BoundClosure0(this, 'viewTestMethod$1'); },
 run$0: function() {
  this._tests$0();
}
};

$$.ViewTestViewComponent = {"":
 ["onRegisterCalled!", "onRemoveCalled!", "listNotificationInterestsCalled!", "handleNotificationCalled!"],
 "super": "Object"
};

$$.ViewTestMediator = {"":
 ["name", "viewComponent", "multitonKey"],
 "super": "Mediator",
 get$vc: function() {
  return this.viewComponent;
},
 onRegister$0: function() {
  this.get$vc().set$onRegisterCalled(true);
},
 listNotificationInterests$0: function() {
  this.get$vc().set$listNotificationInterestsCalled(true);
  return [$.ViewTestNotes_NOTE_1, $.ViewTestNotes_NOTE_2, $.ViewTestNotes_NOTE_3];
},
 handleNotification$1: function(note) {
  this.get$vc().set$handleNotificationCalled(true);
},
 get$handleNotification: function() { return new $.BoundClosure0(this, 'handleNotification$1'); },
 onRemove$0: function() {
  this.get$vc().set$onRemoveCalled(true);
}
};

$$.Test_Controller = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('Controller', new $.Test_Controller__tests_anon());
},
 run$0: function() {
  this._tests$0();
}
};

$$.ControllerTestVO = {"":
 ["input?", "doubled!", "squared!"],
 "super": "Object"
};

$$.ControllerTestMacroCommand = {"":
 ["subCommands", "multitonKey"],
 "super": "MacroCommand",
 initializeMacroCommand$0: function() {
  this.addSubCommand$1(new $.ControllerTestMacroCommand_initializeMacroCommand_anon());
  this.addSubCommand$1(new $.ControllerTestMacroCommand_initializeMacroCommand_anon0());
}
};

$$.ControllerTestDoubleInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$doubled(t1 * 2);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$doubled($.mul(t1, 2));
}
};

$$.ControllerTestSquareInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$squared(t1 * t1);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$squared($.mul(t1, t1));
}
};

$$.Test_Facade = {"":
 [],
 "super": "Object",
 _tests$0: function() {
  $.group('Facade::IFacade', new $.Test_Facade__tests_anon());
  $.group('Facade::IController', new $.Test_Facade__tests_anon0());
  $.group('Facade::IView', new $.Test_Facade__tests_anon1(this));
  $.group('Facade::IModel', new $.Test_Facade__tests_anon2());
},
 run$0: function() {
  this._tests$0();
}
};

$$.FacadeTestViewComponent = {"":
 ["onRegisterCalled!", "onRemoveCalled!", "listNotificationInterestsCalled!", "handleNotificationCalled!"],
 "super": "Object"
};

$$.FacadeTestMediator = {"":
 ["name", "viewComponent", "multitonKey"],
 "super": "Mediator",
 get$vc: function() {
  return this.viewComponent;
},
 onRegister$0: function() {
  this.get$vc().set$onRegisterCalled(true);
},
 listNotificationInterests$0: function() {
  this.get$vc().set$listNotificationInterestsCalled(true);
  return [$.FacadeTestNotes_NOTE_1, $.FacadeTestNotes_NOTE_2, $.FacadeTestNotes_NOTE_3];
},
 handleNotification$1: function(note) {
  this.get$vc().set$handleNotificationCalled(true);
},
 get$handleNotification: function() { return new $.BoundClosure0(this, 'handleNotification$1'); },
 onRemove$0: function() {
  this.get$vc().set$onRemoveCalled(true);
}
};

$$.FacadeTestProxy = {"":
 ["name", "data", "multitonKey"],
 "super": "Proxy",
 onRegister$0: function() {
  this.setData$1($.FacadeTestProxy_ON_REGISTER_CALLED);
},
 onRemove$0: function() {
  this.setData$1($.FacadeTestProxy_ON_REMOVE_CALLED);
},
 FacadeTestProxy$0: function() {
  this.setData$1($.FacadeTestProxy_FRESH);
}
};

$$.FacadeTestVO = {"":
 ["input?", "doubled!", "squared!"],
 "super": "Object"
};

$$.FacadeTestMacroCommand = {"":
 ["subCommands", "multitonKey"],
 "super": "MacroCommand",
 initializeMacroCommand$0: function() {
  this.addSubCommand$1(new $.FacadeTestMacroCommand_initializeMacroCommand_anon());
  this.addSubCommand$1(new $.FacadeTestMacroCommand_initializeMacroCommand_anon0());
}
};

$$.FacadeTestDoubleInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$doubled(t1 * 2);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$doubled($.mul(t1, 2));
}
};

$$.FacadeTestSquareInputCommand = {"":
 ["multitonKey"],
 "super": "SimpleCommand",
 execute$1: function(note) {
  var vo = note.getBody$0();
  var t1 = vo.get$input();
  if (typeof t1 !== 'number')
    return this.execute$1$bailout(1, vo, t1);
  vo.set$squared(t1 * t1);
},
 execute$1$bailout: function(state, vo, t1) {
  vo.set$squared($.mul(t1, t1));
}
};

$$.FilteredElementList = {"":
 ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $.FilteredElementList__filtered_anon()));
},
 get$first: function() {
  for (var t1 = $.iterator(this._childNodes); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (typeof t2 === 'object' && t2 !== null && t2.is$Element())
      return t2;
  }
  return;
},
 forEach$1: function(f) {
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.CTC15);
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure0(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach(collection, this.get$add());
},
 addLast$1: function(value) {
  this.add$1(value);
},
 removeRange$2: function(start, rangeLength) {
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  return $.map(this.get$_filtered(), f);
},
 filter$1: function(f) {
  return $.filter(this.get$_filtered(), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 last$0: function() {
  return $.last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ChildrenElementList = {"":
 ["_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  var output = $.ListImplementation_List(t1.length);
  for (var len = t1.length, i = 0; i < len; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state, t1) {
  var output = $.ListImplementation_List($.get$length(t1));
  for (var len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    var t2 = $.index(t1, i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 get$first: function() {
  return this._element.get$$$dom_firstElementChild();
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this._childElements); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(f, output));
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 isEmpty$0: function() {
  return this._element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.CTC14);
},
 add$1: function(value) {
  this._element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1(value);
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._element; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC23);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 clear$0: function() {
  this._element.set$text('');
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._element.$dom_removeChild$1(result);
  return result;
},
 last$0: function() {
  return this._element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementList = {"":
 ["_nodeList"],
 "super": "Object",
 get$first: function() {
  return $.index(this._nodeList, 0);
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 filter$1: function(f) {
  var out = $._ElementList$([]);
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.add$1(t2);
  }
  return out;
},
 isEmpty$0: function() {
  return $.isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.CTC14);
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.CTC14);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC14);
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC14);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC14);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 clear$0: function() {
  throw $.$$throw($.CTC14);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC14);
},
 last$0: function() {
  return $.last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementListIterator = {"":
 ["_list", "_index"],
 "super": "Object",
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC10);
  var t1 = this._list;
  var t2 = this._index;
  if (typeof t2 !== 'number')
    return this.next$0$bailout(1, t1, t2);
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout: function(state, t1, t2) {
  this._index = $.add(t2, 1);
  return $.index(t1, t2);
},
 hasNext$0: function() {
  var t1 = this._index;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = $.get$length(this._list);
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t1, t3);
  return t1 < t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._index;
    case 1:
      state = 0;
      var t3 = $.get$length(this._list);
    case 2:
      state = 0;
      return $.lt(t1, t3);
  }
}
};

$$._ElementList = {"":
 ["_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._ElementList$($._ListWrapper.prototype.filter$1.call(this, f));
},
 getRange$2: function(start, rangeLength) {
  return $._ElementList$($._ListWrapper.prototype.getRange$2.call(this, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ChildNodeListLazy = {"":
 ["_this"],
 "super": "Object",
 get$first: function() {
  return this._this.firstChild;
},
 last$0: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._this; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ListWrapper = {"":
 [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._list);
},
 forEach$1: function(f) {
  return $.forEach(this._list, f);
},
 map$1: function(f) {
  return $.map(this._list, f);
},
 filter$1: function(f) {
  return $.filter(this._list, f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._list);
},
 get$length: function() {
  return $.get$length(this._list);
},
 operator$index$1: function(index) {
  return $.index(this._list, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._list, value);
},
 addAll$1: function(collection) {
  return $.addAll(this._list, collection);
},
 clear$0: function() {
  return $.clear(this._list);
},
 removeLast$0: function() {
  return $.removeLast(this._list);
},
 last$0: function() {
  return $.last(this._list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._list, start, rangeLength);
},
 get$first: function() {
  return $.index(this._list, 0);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NodeListWrapper = {"":
 ["_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._NodeListWrapper$($.filter(this._list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FixedSizeListIterator = {"":
 ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 hasNext$0: function() {
  var t1 = this._lib_length;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t1, t3);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._lib_length;
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
}
};

$$._VariableSizeListIterator = {"":
 [],
 "super": "Object",
 hasNext$0: function() {
  var t1 = $.get$length(this._array);
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t3, t1);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.get$length(this._array);
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC10);
  var t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.next$0$bailout(2, t1, t3);
  this._pos = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      if (this.hasNext$0() !== true)
        throw $.$$throw($.CTC10);
      var t1 = this._array;
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      this._pos = $.add(t3, 1);
      return $.index(t1, t3);
  }
}
};

$$._Manager = {"":
 ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
    this.isWorker = $isWorker;
    this.supportsWorkers = $supportsWorkers;
    this.fromCommandLine = typeof(window) == 'undefined';
  
},
 _nativeInitWorkerMessageHandler$0: function() {
    $globalThis.onmessage = function (e) {
      _IsolateNatives._processWorkerMessage(this.mainManager, e);
    }
  
},
 maybeCloseWorker$0: function() {
  if ($.isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.HashMapImplementation$();
  this.managers = $.HashMapImplementation$();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"":
 ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
$initGlobals(this);
},
 eval$1: function(code) {
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    t1 = old;
    if (!(t1 == null))
      t1._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
$setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  var t1 = this.ports;
  if (t1.containsKey$1(portId) === true)
    throw $.$$throw($.ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(t1, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1 = this.ports;
  t1.remove$1(portId);
  if ($.isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.HashMapImplementation$();
  this.initGlobals$0();
}
};

$$._EventLoop = {"":
 ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($.ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function() {
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"":
 ["isolate", "fn", "message?"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":
 [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
$globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"":
 ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.Completer_Completer();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"":
 ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 hashCode$0: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":
 ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    var t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"":
 ["_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"":
 ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  var t1 = this._visited;
  if (!($.index(t1, list) == null))
    return;
  $.indexSet(t1, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1 = this._visited;
  if (!($.index(t1, map) == null))
    return;
  $.indexSet(t1, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"":
 ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"":
 ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"":
 ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId = $.index(x, 1);
  var isolateId = $.index(x, 2);
  var receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":
 ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; i < length$; ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
o['__MessageTraverser__attached_info__'] = (void 0);
},
 _setAttachedInfo$2: function(o, info) {
o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
return o['__MessageTraverser__attached_info__'];
}
};

$$._MessageTraverserVisitedMap = {"":
 [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"":
 [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  var t1 = this._visited;
  t1.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    t1.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  var t1 = this._visited;
  var copy = t1.operator$index$1(list);
  if (!(copy == null))
    return copy;
  var len = list.length;
  copy = $.ListImplementation_List(len);
  t1.operator$indexSet$2(list, copy);
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= list.length)
      throw $.ioore(i);
    t1 = this._dispatch$1(list[i]);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state, list) {
  var t1 = this._visited;
  var copy = $.index(t1, list);
  if (!(copy == null))
    return copy;
  var len = $.get$length(list);
  copy = $.ListImplementation_List(len);
  $.indexSet(t1, list, copy);
  for (var i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  var t2 = this._visited;
  t1.copy_10 = $.index(t2, map);
  var t3 = t1.copy_10;
  if (!(t3 == null))
    return t3;
  t1.copy_10 = $.HashMapImplementation$();
  $.indexSet(t2, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1 = this._visited;
  var copyId = $.index(t1, list);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(t1, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var t1 = this._visited;
  var copyId = $.index(t1, map);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(t1, map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  var len = list.length;
  var result = $.ListImplementation_List(len);
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= list.length)
      throw $.ioore(i);
    var t1 = this._dispatch$1(list[i]);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state, list) {
  var len = $.get$length(list);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"":
 [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.HashMapImplementation$();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id = $.index(x, 1);
  var dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  var len = dartList.length;
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= dartList.length)
      throw $.ioore(i);
    var t1 = this._deserializeHelper$1(dartList[i]);
    if (i < 0 || i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state, dartList, id) {
  $.indexSet(this._deserialized, id, dartList);
  var len = $.get$length(dartList);
  for (var i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result = $.HashMapImplementation$();
  var id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  var keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  var values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  var len = keys.length;
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= keys.length)
      throw $.ioore(i);
    var key = this._deserializeHelper$1(keys[i]);
    if (i < 0 || i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state) {
    case 0:
      var result = $.HashMapImplementation$();
      var id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      var keys = $.index(x, 2);
    case 1:
      state = 0;
      var values = $.index(x, 3);
    case 2:
      state = 0;
      var len = $.get$length(keys);
      for (var i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"":
 ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(this, callback), milliSeconds);
}
};

$$.Configuration = {"":
 ["currentTestCase"],
 "super": "Object",
 get$name: function() {
  return 'Configuration';
},
 get$autoStart: function() {
  return true;
},
 onInit$0: function() {
},
 onStart$0: function() {
  this._postMessage$1('unittest-suite-wait-for-done');
},
 onTestStart$1: function(testCase) {
  this.currentTestCase = testCase;
},
 onTestResult$1: function(testCase) {
  this.currentTestCase = null;
},
 onDone$5: function(passed, failed, errors, results, uncaughtError) {
  for (var t1 = $.iterator($._tests); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    $.print($.S($.toUpperCase(t2.get$result())) + ': ' + $.S(t2.get$description()));
    if (!$.eqB(t2.get$message(), ''))
      $.print(this._indent$1(t2.get$message()));
    if (!(t2.get$stackTrace() == null) && !$.eqB(t2.get$stackTrace(), ''))
      $.print(this._indent$1(t2.get$stackTrace()));
  }
  $.print('');
  if (passed === 0 && failed === 0 && errors === 0) {
    $.print('No tests found.');
    var success = false;
  } else if (failed === 0 && errors === 0 && uncaughtError == null) {
    $.print('All ' + $.S(passed) + ' tests passed.');
    success = true;
  } else {
    if (!(uncaughtError == null))
      $.print('Top-level uncaught error: ' + $.S(uncaughtError));
    $.print($.S(passed) + ' PASSED, ' + $.S(failed) + ' FAILED, ' + $.S(errors) + ' ERRORS');
    success = false;
  }
  if (success)
    this._postMessage$1('unittest-suite-success');
  else
    throw $.$$throw($.ExceptionImplementation$('Some tests failed.'));
},
 _indent$1: function(str) {
  return $.Strings_join($.map($.split(str, '\n'), new $.Configuration__indent_anon()), '\n');
},
 _postMessage$1: function(message) {
  $.print(message);
}
};

$$._IsNotNull = {"":
 [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return !(item == null);
},
 describe$1: function(description) {
  return $.add$1(description, 'not null');
}
};

$$._IsTrue = {"":
 [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return $.eq(item, true);
},
 describe$1: function(description) {
  return $.add$1(description, 'true');
}
};

$$._IsFalse = {"":
 [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return !$.eqB(item, true);
},
 describe$1: function(description) {
  return description.add$1('false');
}
};

$$._IsSameAs = {"":
 ["_expected"],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  var t1 = this._expected;
  return item == null ? t1 == null : item === t1;
},
 describe$1: function(description) {
  return description.add$1('same instance as ').addDescriptionOf$1(this._expected);
}
};

$$._DeepMatcher = {"":
 ["_expected", "_limit", "count"],
 "super": "BaseMatcher",
 _compareIterables$4: function(expected, actual, matcher, depth) {
  if (!(typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable())))
    return 'is not Iterable';
  var expectedIterator = $.iterator(expected);
  var actualIterator = $.iterator(actual);
  for (var position = 0, reason = null; reason == null;)
    if (expectedIterator.hasNext$0() === true)
      if (actualIterator.hasNext$0() === true) {
        var r = matcher.call$4(expectedIterator.next$0(), actualIterator.next$0(), 'mismatch at position ' + $.S(position), depth);
        if (!(r == null))
          reason = $.toString(r);
        ++position;
      } else
        reason = 'shorter than expected';
    else {
      if (actualIterator.hasNext$0() === true)
        ;
      else
        return;
      reason = 'longer than expected';
    }
  return reason;
},
 _recursiveMatch$4: function(expected, actual, location$, depth) {
  if (typeof expected !== 'string' && (typeof expected !== 'object' || expected === null || expected.constructor !== Array && !expected.is$JavaScriptIndexingBehavior()))
    return this._recursiveMatch$4$bailout(1, expected, actual, location$, depth);
  var canRecurse = depth === 0 || this._limit > 1;
  if (expected === actual)
    var reason = null;
  else if (depth > this._limit)
    reason = $.StringDescription$('recursion depth limit exceeded');
  else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
    var r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
    reason = !(r == null) ? $.StringDescription$(r) : null;
  } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
    if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
      reason = $.StringDescription$('expected a map');
    else if (!(expected.length === $.get$length(actual)))
      reason = $.StringDescription$('different map lengths');
    else
      for (var t1 = $.iterator(expected.getKeys$0()), t2 = depth + 1, reason = null; t1.hasNext$0() === true;) {
        var t3 = t1.next$0();
        if (actual.containsKey$1(t3) !== true) {
          reason = $.StringDescription$('missing map key ');
          reason.addDescriptionOf$1(t3);
          break;
        }
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= expected.length)
          throw $.ioore(t3);
        reason = this._recursiveMatch$4(expected[t3], actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
        if (!(reason == null))
          break;
      }
  else {
    reason = $.StringDescription$('');
    if (depth > 1)
      $.add$1(reason.add$1('expected ').addDescriptionOf$1(expected), ' but was ').addDescriptionOf$1(actual);
    else
      reason.add$1('was ').addDescriptionOf$1(actual);
  }
  if (!(reason == null) && location$.length > 0)
    $.add$1($.add$1(reason, ' '), location$);
  return reason;
},
 _recursiveMatch$4$bailout: function(state, expected, actual, location$, depth) {
  var canRecurse = depth === 0 || this._limit > 1;
  if ($.eqB(expected, actual))
    var reason = null;
  else if (depth > this._limit)
    reason = $.StringDescription$('recursion depth limit exceeded');
  else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
    var r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
    reason = !(r == null) ? $.StringDescription$(r) : null;
  } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
    if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
      reason = $.StringDescription$('expected a map');
    else if (!$.eqB($.get$length(expected), $.get$length(actual)))
      reason = $.StringDescription$('different map lengths');
    else
      for (var t1 = $.iterator(expected.getKeys$0()), t2 = depth + 1, reason = null; t1.hasNext$0() === true;) {
        var t3 = t1.next$0();
        if (actual.containsKey$1(t3) !== true) {
          reason = $.StringDescription$('missing map key ');
          reason.addDescriptionOf$1(t3);
          break;
        }
        reason = this._recursiveMatch$4($.index(expected, t3), actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
        if (!(reason == null))
          break;
      }
  else {
    reason = $.StringDescription$('');
    if (depth > 1)
      $.add$1(reason.add$1('expected ').addDescriptionOf$1(expected), ' but was ').addDescriptionOf$1(actual);
    else
      reason.add$1('was ').addDescriptionOf$1(actual);
  }
  if (!(reason == null) && location$.length > 0)
    $.add$1($.add$1(reason, ' '), location$);
  return reason;
},
 get$_recursiveMatch: function() { return new $.BoundClosure1(this, '_recursiveMatch$4'); },
 _match$2: function(expected, actual) {
  var reason = this._recursiveMatch$4(expected, actual, '', 0);
  return reason == null ? null : $.toString(reason);
},
 matches$2: function(item, matchState) {
  return this._match$2(this._expected, item) == null;
},
 describe$1: function(description) {
  return description.addDescriptionOf$1(this._expected);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return mismatchDescription.add$1(this._match$2(this._expected, item));
}
};

$$._Predicate = {"":
 ["_matcher", "_description"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  return this._matcher$1(item);
},
 describe$1: function(description) {
  return description.add$1(this._description);
}
};

$$.StringDescription = {"":
 ["_out"],
 "super": "Object",
 toString$0: function() {
  return this._out;
},
 add$1: function(text) {
  this._out = $.S(this._out) + $.S(text);
  return this;
},
 addDescriptionOf$1: function(value) {
  if (typeof value === 'object' && value !== null && !!value.is$Matcher)
    value.describe$1(this);
  else if (typeof value === 'string')
    this._addEscapedString$1(value);
  else {
    var description = value == null ? 'null' : $.toString(value);
    if ($.startsWith(description, '<') === true && $.endsWith(description, '>') === true)
      this.add$1(description);
    else {
      this.add$1('<');
      this.add$1(description);
      this.add$1('>');
    }
  }
  return this;
},
 _addEscapedString$1: function(string) {
  this.add$1('\'');
  for (var t1 = string.length, i = 0; i < t1; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    this.add$1(this._escape$1(string[i]));
  }
  this.add$1('\'');
},
 _escape$1: function(ch) {
  if (typeof ch !== 'string')
    return this._escape$1$bailout(1, ch);
  if (ch === '\'')
    return '\'';
  else if (ch === '\n')
    return '\\n';
  else if (ch === '\r')
    return '\\r';
  else if (ch === '\x09')
    return '\\t';
  else
    return ch;
},
 _escape$1$bailout: function(state, ch) {
  if ($.eqB(ch, '\''))
    return '\'';
  else if ($.eqB(ch, '\n'))
    return '\\n';
  else if ($.eqB(ch, '\r'))
    return '\\r';
  else if ($.eqB(ch, '\x09'))
    return '\\t';
  else
    return ch;
},
 StringDescription$1: function(init) {
  this._out = init;
}
};

$$.DefaultFailureHandler = {"":
 [],
 "super": "Object",
 fail$1: function(reason) {
  throw $.$$throw($.ExpectException$(reason));
},
 failMatch$5: function(actual, matcher, reason, matchState, verbose) {
  this.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
},
 DefaultFailureHandler$0: function() {
  if ($._assertErrorFormatter == null)
    $._assertErrorFormatter = $._defaultErrorFormatter;
}
};

$$.MatchState = {"":
 ["state"],
 "super": "Object"
};

$$.BaseMatcher = {"":
 [],
 "super": "Object",
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return mismatchDescription.add$1('was ').addDescriptionOf$1(item);
},
 is$Matcher: true
};

$$.TestCase = {"":
 ["id?", "description?", "_setUp", "_tearDown", "test", "callbackFunctionsOutstanding?", "message?", "result=", "stackTrace?", "currentGroup", "startTime", "runningTime", "enabled", "_doneTeardown"],
 "super": "Object",
 _setUp$0: function() { return this._setUp.call$0(); },
 _tearDown$0: function() { return this._tearDown.call$0(); },
 test$0: function() { return this.test.call$0(); },
 get$isComplete: function() {
  return this.enabled !== true || !(this.result == null);
},
 run$0: function() {
  if (this.enabled === true) {
    this.stackTrace = null;
    this.result = null;
    this.message = '';
    this._doneTeardown = false;
    if (!(this._setUp == null))
      this._setUp$0();
    $._config.onTestStart$1(this);
    this.startTime = $.Date_Date$now();
    this.runningTime = null;
    this.test$0();
  }
},
 _complete$0: function() {
  if (this.runningTime == null)
    this.runningTime = $.Duration$(0, 0, 0, 0, 0);
  if (this._doneTeardown !== true) {
    if (!(this._tearDown == null))
      this._tearDown$0();
    this._doneTeardown = true;
  }
  $._config.onTestResult$1(this);
},
 pass$0: function() {
  this.result = 'pass';
  this._complete$0();
},
 fail$2: function(messageText, stack) {
  var t1 = this.result;
  if (!(t1 == null)) {
    if ($.eqB(t1, 'pass'))
      this.error$2('Test failed after initially passing: ' + $.S(messageText), stack);
    else if ($.eqB(this.result, 'fail'))
      this.error$2('Test failed more than once: ' + $.S(messageText), stack);
  } else {
    this.result = 'fail';
    this.message = messageText;
    this.stackTrace = stack;
    this._complete$0();
  }
},
 error$2: function(messageText, stack) {
  this.result = 'error';
  this.message = messageText;
  this.stackTrace = stack;
  this._complete$0();
}
};

$$.Observer = {"":
 ["notifyMethod", "notifyContext"],
 "super": "Object",
 setNotifyMethod$1: function(callback) {
  this.notifyMethod = callback;
},
 setNotifyContext$1: function(caller) {
  this.notifyContext = caller;
},
 getNotifyMethod$0: function() {
  return this.notifyMethod;
},
 getNotifyContext$0: function() {
  return this.notifyContext;
},
 notifyObserver$1: function(notification) {
  if (!(this.notifyContext == null))
    this.getNotifyMethod$0().call$1(notification);
},
 compareNotifyContext$1: function(object) {
  var t1 = this.notifyContext;
  return object == null ? t1 == null : object === t1;
}
};

$$.Notification = {"":
 ["name?", "type", "body"],
 "super": "Object",
 getName$0: function() {
  return this.name;
},
 getBody$0: function() {
  return this.body;
},
 getType$0: function() {
  return this.type;
}
};

$$.Notifier = {"":
 ["multitonKey?"],
 "super": "Object",
 sendNotification$3: function(noteName, body, type) {
  if (!(this.get$facade() == null))
    this.get$facade().sendNotification$3(noteName, body, type);
},
 sendNotification$1: function(noteName) {
  return this.sendNotification$3(noteName,null,null)
},
 sendNotification$2: function(noteName,body) {
  return this.sendNotification$3(noteName,body,null)
},
 initializeNotifier$1: function(key) {
  this.multitonKey = key;
},
 get$facade: function() {
  var t1 = this.multitonKey;
  if (t1 == null)
    throw $.$$throw($.throwRuntimeError('cannot resolve MultitonNotifierLacksKey'));
  return $.Facade_getInstance(t1);
}
};

$$.Proxy = {"":
 ["name?", "data", "multitonKey"],
 "super": "Notifier",
 getName$0: function() {
  return this.name;
},
 setData$1: function(dataObject) {
  this.data = dataObject;
},
 getData$0: function() {
  return this.data;
},
 onRegister$0: function() {
},
 onRemove$0: function() {
}
};

$$.Mediator = {"":
 ["name?", "viewComponent", "multitonKey"],
 "super": "Notifier",
 getName$0: function() {
  return this.name;
},
 setViewComponent$1: function(component) {
  this.viewComponent = component;
},
 getViewComponent$0: function() {
  return this.viewComponent;
},
 listNotificationInterests$0: function() {
  return $.ListImplementation_List(null);
},
 handleNotification$1: function(note) {
},
 get$handleNotification: function() { return new $.BoundClosure0(this, 'handleNotification$1'); },
 onRegister$0: function() {
},
 onRemove$0: function() {
}
};

$$.SimpleCommand = {"":
 [],
 "super": "Notifier",
 execute$1: function(note) {
}
};

$$.MacroCommand = {"":
 [],
 "super": "Notifier",
 initializeMacroCommand$0: function() {
},
 addSubCommand$1: function(commandFactory) {
  this.subCommands.push(commandFactory);
},
 execute$1: function(note) {
  for (var t1 = $.iterator(this.subCommands); t1.hasNext$0() === true;) {
    var commandInstance = t1.next$0().call$0();
    commandInstance.initializeNotifier$1(this.multitonKey);
    commandInstance.execute$1(note);
  }
},
 MacroCommand$0: function() {
  this.subCommands = $.ListImplementation_List(null);
  this.initializeMacroCommand$0();
}
};

$$.Facade = {"":
 ["controller?", "model?", "view?", "multitonKey?"],
 "super": "Object",
 initializeFacade$0: function() {
  this.initializeModel$0();
  this.initializeController$0();
  this.initializeView$0();
},
 initializeController$0: function() {
  if (!(this.controller == null))
    return;
  this.controller = $.Controller_getInstance(this.multitonKey);
},
 initializeModel$0: function() {
  if (!(this.model == null))
    return;
  this.model = $.Model_getInstance(this.multitonKey);
},
 initializeView$0: function() {
  if (!(this.view == null))
    return;
  this.view = $.View_getInstance(this.multitonKey);
},
 registerCommand$2: function(noteName, commandFactory) {
  this.controller.registerCommand$2(noteName, commandFactory);
},
 removeCommand$1: function(noteName) {
  this.controller.removeCommand$1(noteName);
},
 hasCommand$1: function(noteName) {
  return this.controller.hasCommand$1(noteName);
},
 registerProxy$1: function(proxy) {
  this.model.registerProxy$1(proxy);
},
 retrieveProxy$1: function(proxyName) {
  return this.model.retrieveProxy$1(proxyName);
},
 removeProxy$1: function(proxyName) {
  var t1 = this.model;
  return !(t1 == null) ? t1.removeProxy$1(proxyName) : null;
},
 hasProxy$1: function(proxyName) {
  return this.model.hasProxy$1(proxyName);
},
 registerMediator$1: function(mediator) {
  var t1 = this.view;
  if (!(t1 == null))
    t1.registerMediator$1(mediator);
},
 retrieveMediator$1: function(mediatorName) {
  return this.view.retrieveMediator$1(mediatorName);
},
 removeMediator$1: function(mediatorName) {
  var t1 = this.view;
  return !(t1 == null) ? t1.removeMediator$1(mediatorName) : null;
},
 hasMediator$1: function(mediatorName) {
  return this.view.hasMediator$1(mediatorName);
},
 sendNotification$3: function(noteName, body, type) {
  this.notifyObservers$1($.Notification$(noteName, body, type));
},
 sendNotification$1: function(noteName) {
  return this.sendNotification$3(noteName,null,null)
},
 sendNotification$2: function(noteName,body) {
  return this.sendNotification$3(noteName,body,null)
},
 registerObserver$2: function(noteName, observer) {
  this.view.registerObserver$2(noteName, observer);
},
 removeObserver$2: function(noteName, notifyContext) {
  this.view.removeObserver$2(noteName, notifyContext);
},
 notifyObservers$1: function(note) {
  var t1 = this.view;
  if (!(t1 == null))
    t1.notifyObservers$1(note);
},
 initializeNotifier$1: function(key) {
  this.multitonKey = key;
},
 Facade$1: function(key) {
  if (!($.index($.Facade_instanceMap, key) == null))
    throw $.$$throw($.MultitonErrorFacadeExists$());
  this.initializeNotifier$1(key);
  $.indexSet($.Facade_instanceMap, this.multitonKey, this);
  this.initializeFacade$0();
}
};

$$.MultitonErrorFacadeExists = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'IFacade Multiton instance already constructed for this key.';
}
};

$$.Model = {"":
 ["proxyMap", "multitonKey?"],
 "super": "Object",
 initializeModel$0: function() {
},
 registerProxy$1: function(proxy) {
  proxy.initializeNotifier$1(this.multitonKey);
  $.indexSet(this.proxyMap, proxy.getName$0(), proxy);
  proxy.onRegister$0();
},
 retrieveProxy$1: function(proxyName) {
  return $.index(this.proxyMap, proxyName);
},
 removeProxy$1: function(proxyName) {
  var t1 = this.proxyMap;
  var proxy = $.index(t1, proxyName);
  if (!(proxy == null)) {
    $.indexSet(t1, proxyName, null);
    proxy.onRemove$0();
  }
  return proxy;
},
 hasProxy$1: function(proxyName) {
  return !($.index(this.proxyMap, proxyName) == null);
},
 Model$1: function(key) {
  if (!($.index($.Model_instanceMap, key) == null))
    throw $.$$throw($.MultitonErrorModelExists$());
  this.multitonKey = key;
  $.indexSet($.Model_instanceMap, this.multitonKey, this);
  this.proxyMap = $.HashMapImplementation$();
  this.initializeModel$0();
}
};

$$.MultitonErrorModelExists = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'IModel Multiton instance already constructed for this key.';
}
};

$$.View = {"":
 ["mediatorMap", "observerMap", "multitonKey?"],
 "super": "Object",
 initializeView$0: function() {
},
 registerObserver$2: function(noteName, observer) {
  var t1 = this.observerMap;
  if ($.index(t1, noteName) == null)
    $.indexSet(t1, noteName, $.ListImplementation_List(null));
  $.add$1($.index(t1, noteName), observer);
},
 notifyObservers$1: function(note) {
  var observers_ref = this.observerMap.operator$index$1(note.getName$0());
  if (typeof observers_ref !== 'string' && (typeof observers_ref !== 'object' || observers_ref === null || observers_ref.constructor !== Array && !observers_ref.is$JavaScriptIndexingBehavior()))
    return this.notifyObservers$1$bailout(1, note, observers_ref);
  var observers = $.ListImplementation_List(null);
  for (var observer = null, i = 0; t1 = observers_ref.length, i < t1; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    observer = observers_ref[i];
    observers.push(observer);
  }
  for (i = 0; t1 = observers.length, i < t1; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    observer = observers[i];
    observer.notifyObserver$1(note);
  }
  var t1;
},
 notifyObservers$1$bailout: function(state, note, observers_ref) {
  if (!(observers_ref == null)) {
    var observers = $.ListImplementation_List(null);
    for (var observer = null, i = 0; $.ltB(i, $.get$length(observers_ref)); ++i) {
      observer = $.index(observers_ref, i);
      observers.push(observer);
    }
    for (i = 0; t1 = observers.length, i < t1; ++i) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      observer = observers[i];
      observer.notifyObserver$1(note);
    }
  }
  var t1;
},
 removeObserver$2: function(noteName, notifyContext) {
  var t1 = this.observerMap;
  var observers = t1.operator$index$1(noteName);
  if (typeof observers !== 'string' && (typeof observers !== 'object' || observers === null || observers.constructor !== Array && !observers.is$JavaScriptIndexingBehavior()))
    return this.removeObserver$2$bailout(1, noteName, notifyContext, observers, t1, 0, 0);
  for (var i = 0; t2 = observers.length, i < t2; ++i) {
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    var t3 = observers[i].compareNotifyContext$1(notifyContext);
    if (typeof t3 !== 'boolean')
      return this.removeObserver$2$bailout(2, noteName, notifyContext, observers, t3, i, t1);
    if (t3) {
      $.removeRange(observers, i, 1);
      break;
    }
  }
  if (observers.length === 0)
    t1.operator$indexSet$2(noteName, null);
  var t2;
},
 removeObserver$2$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var noteName = env0;
      var notifyContext = env1;
      observers = env2;
      t1 = env3;
      break;
    case 2:
      noteName = env0;
      notifyContext = env1;
      observers = env2;
      t2 = env3;
      i = env4;
      t1 = env5;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.observerMap;
      var observers = $.index(t1, noteName);
    case 1:
      state = 0;
      var i = 0;
    case 2:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!$.ltB(i, $.get$length(observers)))
                break L0;
              var t2 = $.index(observers, i).compareNotifyContext$1(notifyContext);
            case 2:
              state = 0;
              if ($.eqB(t2, true)) {
                $.removeRange(observers, i, 1);
                break L0;
              }
              ++i;
          }
      if ($.eqB($.get$length(observers), 0))
        $.indexSet(t1, noteName, null);
  }
},
 registerMediator$1: function(mediator) {
  var t1 = this.mediatorMap;
  if (!(t1.operator$index$1(mediator.getName$0()) == null))
    return;
  mediator.initializeNotifier$1(this.multitonKey);
  t1.operator$indexSet$2(mediator.getName$0(), mediator);
  var interests = mediator.listNotificationInterests$0();
  if (typeof interests !== 'string' && (typeof interests !== 'object' || interests === null || interests.constructor !== Array && !interests.is$JavaScriptIndexingBehavior()))
    return this.registerMediator$1$bailout(1, mediator, interests);
  if (interests.length > 0) {
    var observer = $.Observer$(mediator.get$handleNotification(), mediator);
    for (var i = 0; t1 = interests.length, i < t1; ++i) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      this.registerObserver$2(interests[i], observer);
    }
  }
  mediator.onRegister$0();
},
 registerMediator$1$bailout: function(state, mediator, interests) {
  if ($.gtB($.get$length(interests), 0)) {
    var observer = $.Observer$(mediator.get$handleNotification(), mediator);
    for (var i = 0; $.ltB(i, $.get$length(interests)); ++i)
      this.registerObserver$2($.index(interests, i), observer);
  }
  mediator.onRegister$0();
},
 retrieveMediator$1: function(mediatorName) {
  return $.index(this.mediatorMap, mediatorName);
},
 removeMediator$1: function(mediatorName) {
  var t1 = this.mediatorMap;
  var mediator = t1.operator$index$1(mediatorName);
  if (!(mediator == null)) {
    var interests = mediator.listNotificationInterests$0();
    if (typeof interests !== 'string' && (typeof interests !== 'object' || interests === null || interests.constructor !== Array && !interests.is$JavaScriptIndexingBehavior()))
      return this.removeMediator$1$bailout(1, mediatorName, t1, mediator, interests);
    for (var i = 0; t2 = interests.length, i < t2; ++i) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      this.removeObserver$2(interests[i], mediator);
    }
    t1.operator$indexSet$2(mediatorName, null);
    mediator.onRemove$0();
  }
  return mediator;
  var t2;
},
 removeMediator$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var mediatorName = env0;
      t1 = env1;
      mediator = env2;
      interests = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.mediatorMap;
      var mediator = $.index(t1, mediatorName);
    case 1:
      if (state === 1 || state === 0 && !(mediator == null))
        switch (state) {
          case 0:
            var interests = mediator.listNotificationInterests$0();
          case 1:
            state = 0;
            for (var i = 0; $.ltB(i, $.get$length(interests)); ++i)
              this.removeObserver$2($.index(interests, i), mediator);
            $.indexSet(t1, mediatorName, null);
            mediator.onRemove$0();
        }
      return mediator;
  }
},
 hasMediator$1: function(mediatorName) {
  return !($.index(this.mediatorMap, mediatorName) == null);
},
 View$1: function(key) {
  if (!($.index($.View_instanceMap, key) == null))
    throw $.$$throw($.MultitonErrorViewExists$());
  this.multitonKey = key;
  $.indexSet($.View_instanceMap, this.multitonKey, this);
  this.mediatorMap = $.HashMapImplementation$();
  this.observerMap = $.HashMapImplementation$();
  this.initializeView$0();
}
};

$$.MultitonErrorViewExists = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'IViewMultiton instance already constructed for this key.';
}
};

$$.Controller = {"":
 ["view?", "commandMap", "multitonKey?"],
 "super": "Object",
 initializeController$0: function() {
  this.view = $.View_getInstance(this.multitonKey);
},
 executeCommand$1: function(note) {
  var commandFactory = $.index(this.commandMap, note.getName$0());
  if (commandFactory == null)
    return;
  var commandInstance = commandFactory.call$0();
  commandInstance.initializeNotifier$1(this.multitonKey);
  commandInstance.execute$1(note);
},
 get$executeCommand: function() { return new $.BoundClosure0(this, 'executeCommand$1'); },
 registerCommand$2: function(noteName, commandFactory) {
  var t1 = this.commandMap;
  if ($.index(t1, noteName) == null)
    this.view.registerObserver$2(noteName, $.Observer$(this.get$executeCommand(), this));
  $.indexSet(t1, noteName, commandFactory);
},
 hasCommand$1: function(noteName) {
  return !($.index(this.commandMap, noteName) == null);
},
 removeCommand$1: function(noteName) {
  if (this.hasCommand$1(noteName) === true) {
    this.view.removeObserver$2(noteName, this);
    $.indexSet(this.commandMap, noteName, null);
  }
},
 Controller$1: function(key) {
  if (!($.index($.Controller_instanceMap, key) == null))
    throw $.$$throw($.MultitonErrorControllerExists$());
  this.multitonKey = key;
  $.indexSet($.Controller_instanceMap, this.multitonKey, this);
  this.commandMap = $.HashMapImplementation$();
  this.initializeController$0();
}
};

$$.MultitonErrorControllerExists = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'IController Multiton instance already constructed for this key.';
}
};

$$.Test_Notification__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor minimum args', new $.Test_Notification__tests_anon0());
  $.test('.name, getName()', new $.Test_Notification__tests_anon1());
  $.test('.type, getType()', new $.Test_Notification__tests_anon2());
  $.test('.body, getBody()', new $.Test_Notification__tests_anon3());
}
};

$$.Test_Notification__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Notification$('Test', null, null), $.CTC13, null, null, false);
}
};

$$.Test_Notification__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var note = $.Notification$('Test', null, null);
  $.expect('Test', $.equals(note.getName$0(), 100), null, null, false);
  $.expect('Test', $.equals(note.name, 100), null, null, false);
}
};

$$.Test_Notification__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var note = $.Notification$('Test', null, 'Type');
  $.expect('Type', $.equals(note.getType$0(), 100), null, null, false);
  $.expect('Type', $.equals(note.type, 100), null, null, false);
}
};

$$.Test_Notification__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var body = $.ListImplementation_List(null);
  var note = $.Notification$('Test', body, null);
  $.expect(body, $.equals(note.getBody$0(), 100), null, null, false);
  $.expect(body, $.equals(note.body, 100), null, null, false);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":
 ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":
 ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  var t1 = this.copies_4;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":
 ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  var t1 = this.copies_5;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":
 [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":
 ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC2);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e, 0, 0, 0, 0, 0, 0);
    var length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; i < length$; ++i) {
        if (i < 0 || i >= e.length)
          throw $.ioore(i);
        var element = e[i];
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, copy, i, t3, e, length$, elementCopy, slot);
          for (var j = 0; j < i; ++j) {
            if (j < 0 || j >= e.length)
              throw $.ioore(j);
            t1 = e[j];
            if (j < 0 || j >= copy.length)
              throw $.ioore(j);
            copy[j] = t1;
          }
          if (i < 0 || i >= copy.length)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, copy, length$, i, 0, 0, 0);
    for (; i < length$; ++i) {
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i < 0 || i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.CTC9);
},
 call$1$bailout: function(state, env0, env1, env2, env3, env4, env5, env6) {
  switch (state) {
    case 1:
      var e = env0;
      break;
    case 2:
      copy = env0;
      i = env1;
      t3 = env2;
      e = env3;
      length$ = env4;
      elementCopy = env5;
      slot = env6;
      break;
    case 3:
      e = env0;
      copy = env1;
      length$ = env2;
      i = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC2);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state === 3 || state === 2 || state === 1 || state === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state) {
          case 0:
          case 1:
            state = 0;
            var length$ = $.get$length(e);
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
          case 2:
            if (state === 2 || state === 0 && t1)
              switch (state) {
                case 0:
                  t3.call$2(slot, true);
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          var element = $.index(e, i);
                          var elementCopy = this.call$1(element);
                        case 2:
                          if (state === 2 || state === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state = 0;
                                for (var j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC9);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":
 ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"":
 ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._StorageImpl_getKeys_anon = {"":
 ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.keys_0.push(k);
}
};

$$.runTests_anon = {"":
 [],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t, $._soloTest);
}
};

$$.runTests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._testRunner.call$0();
}
};

$$._defer_anon = {"":
 ["port_1", "callback_0"],
 "super": "Closure",
 call$2: function(msg, reply) {
  this.callback_0.call$0();
  this.port_1.close$0();
}
};

$$.filterTests_anon = {"":
 ["re_0"],
 "super": "Closure",
 call$1: function(t) {
  return this.re_0.hasMatch$1(t.get$description());
}
};

$$.filterTests_anon0 = {"":
 ["testFilter_1"],
 "super": "Closure",
 call$1: function(t) {
  return this.testFilter_1.hasMatch$1(t.get$description());
}
};

$$._nextBatch_anon = {"":
 ["testCase_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.testCase_0;
  t1.run$0();
  if (t1.get$isComplete() !== true && $.eqB(t1.get$callbackFunctionsOutstanding(), 0))
    t1.pass$0();
}
};

$$._ChildrenElementList_filter_anon = {"":
 ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  if (this.f_1.call$1(element) === true)
    this.output_0.push(element);
}
};

$$.FilteredElementList__filtered_anon = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$.FilteredElementList_removeRange_anon = {"":
 [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.Duration_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.gtB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.Duration_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.DateImplementation_toString_fourDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  var absN = $.abs(n);
  var sign = $.ltB(n, 0) ? '-' : '';
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + '0' + $.S(absN);
  if ($.geB(absN, 10))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$.DateImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DateImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.Configuration__indent_anon = {"":
 [],
 "super": "Closure",
 call$1: function(line) {
  return '  ' + $.S(line);
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"":
 ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"":
 ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  var t1 = this.copies_2;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"":
 ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  var t1 = this.copies_3;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"":
 ["writeSlot_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(1, e, 0, 0);
  if (e instanceof Date)
    throw $.$$throw($.CTC2);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC3);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(2, e, slot, copy);
    this.writeSlot_6.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); t1.hasNext$0() === true;) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    this.writeSlot_6.call$2(slot, e);
    var length$ = e.length;
    for (var i = 0; i < length$; ++i) {
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      e[i] = t1;
    }
    return e;
  }
  return e;
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      slot = env1;
      copy = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC2);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC3);
    case 2:
      if (state === 2 || state === 0 && $._isJavaScriptSimpleObject(e))
        switch (state) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); t1.hasNext$0() === true;) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_4.call$1(slot);
        if (!(copy == null))
          return copy;
        this.writeSlot_6.call$2(slot, e);
        var length$ = $.get$length(e);
        for (var i = 0; $.ltB(i, length$); ++i)
          $.indexSet(e, i, this.call$1($.index(e, i)));
        return e;
      }
      return e;
  }
}
};

$$.DoubleLinkedQueue_length__ = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.HashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = key;
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  t2 = entry.get$key();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$._convertNativeToDart_IDBKey_containsDate = {"":
 [],
 "super": "Closure",
 call$1: function(object) {
  if (object instanceof Date)
    return true;
  if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, object);
    for (var i = 0; t1 = object.length, i < t1; ++i) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      if (this.call$1(object[i]) === true)
        return true;
    }
  }
  return false;
  var t1;
},
 call$1$bailout: function(state, env0) {
  switch (state) {
    case 1:
      var object = env0;
      break;
  }
  switch (state) {
    case 0:
      if (object instanceof Date)
        return true;
    case 1:
      if (state === 1 || state === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
        switch (state) {
          case 0:
          case 1:
            state = 0;
            for (var i = 0; $.ltB(i, $.get$length(object)); ++i)
              if (this.call$1($.index(object, i)) === true)
                return true;
        }
      return false;
  }
}
};

$$.LinkedHashMapImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._BaseSendPort_call_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._NativeJsSendPort_send_anon = {"":
 ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"":
 ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._waitForPendingPorts_anon = {"":
 ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$._WorkerSendPort_send_anon = {"":
 ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1(workerMessage);
  else
    $.index($._globalState().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_getValues_anon = {"":
 ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.values_0.push(v);
}
};

$$.LinkedHashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  t2 = entry.get$value();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$.HashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = value;
}
};

$$._Copier_visitMap_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._PendingSendPortFinder_visitList_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Futures_wait_anon = {"":
 ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var t2 = this.pos_4;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = value;
  t2 = this.box_0;
  var remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":
 ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_6.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$.Test_Observer__tests_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor null args', new $.Test_Observer__tests_anon0());
  var t1 = this.this_0;
  $.test('Constructor complete args', new $.Test_Observer__tests_anon1(t1));
  $.test('Constructor minimum args', new $.Test_Observer__tests_anon2(t1));
  $.test('setNotifyMethod()', new $.Test_Observer__tests_anon3(t1));
  $.test('setNotifyContext()', new $.Test_Observer__tests_anon4(t1));
  $.test('compareNotifyContext()', new $.Test_Observer__tests_anon5(t1));
  $.test('notifyObserver()', new $.Test_Observer__tests_anon6(t1));
}
};

$$.Test_Observer__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Observer$(null, null), $.CTC13, null, null, false);
}
};

$$.Test_Observer__tests_anon1 = {"":
 ["this_1"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_1;
  var observer = $.Observer$(t1.get$observerTestMethod(), t1);
  $.expect(observer, $.CTC13, null, null, false);
  $.expect(observer.getNotifyMethod$0(), $.CTC13, null, null, false);
  $.expect(observer.notifyMethod, $.CTC13, null, null, false);
  $.expect(observer.getNotifyContext$0(), $.CTC13, null, null, false);
  $.expect(observer.notifyContext, $.CTC13, null, null, false);
}
};

$$.Test_Observer__tests_anon2 = {"":
 ["this_2"],
 "super": "Closure",
 call$0: function() {
  var observer = $.Observer$(this.this_2.get$observerTestMethod(), null);
  $.expect(observer, $.CTC13, null, null, false);
  $.expect(observer.getNotifyMethod$0(), $.CTC13, null, null, false);
}
};

$$.Test_Observer__tests_anon3 = {"":
 ["this_3"],
 "super": "Closure",
 call$0: function() {
  var observer = $.Observer$(null, null);
  observer.setNotifyMethod$1(this.this_3.get$observerTestMethod());
  $.expect(observer.getNotifyMethod$0(), $.CTC13, null, null, false);
  $.expect(observer.notifyMethod, $.CTC13, null, null, false);
}
};

$$.Test_Observer__tests_anon4 = {"":
 ["this_4"],
 "super": "Closure",
 call$0: function() {
  var observer = $.Observer$(null, null);
  var t1 = this.this_4;
  observer.setNotifyContext$1(t1);
  $.expect(observer.getNotifyContext$0(), $.CTC13, null, null, false);
  $.expect(observer.getNotifyContext$0(), $.same(t1), null, null, false);
  $.expect(observer.notifyContext, $.CTC13, null, null, false);
  $.expect(observer.notifyContext, $.same(t1), null, null, false);
}
};

$$.Test_Observer__tests_anon5 = {"":
 ["this_5"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_5;
  $.expect($.Observer$(null, t1).compareNotifyContext$1(t1), $.CTC20, null, null, false);
}
};

$$.Test_Observer__tests_anon6 = {"":
 ["this_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_6;
  $.Observer$(t1.get$observerTestMethod(), t1).notifyObserver$1($.Notification$('Test', null, null));
  $.expect(t1.get$observerTestNote(), $.CTC13, null, null, false);
  $.expect(t1.get$observerTestNote().get$name(), $.equals('Test', 100), null, null, false);
}
};

$$.Test_SimpleCommand__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor', new $.Test_SimpleCommand__tests_anon0());
  $.test('execute()', new $.Test_SimpleCommand__tests_anon1());
  $.test('initializeNotifier()', new $.Test_SimpleCommand__tests_anon2());
}
};

$$.Test_SimpleCommand__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.SimpleCommandTestDoubleInputCommand$(), $.CTC13, null, null, false);
}
};

$$.Test_SimpleCommand__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var simpleCommand = $.SimpleCommandTestDoubleInputCommand$();
  var vo = $.SimpleCommandTestVO$(5);
  simpleCommand.execute$1($.Notification$('SimpleCommandTestNote', vo, null));
  $.expect(vo.result, $.equals(10, 100), null, null, false);
}
};

$$.Test_SimpleCommand__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var notifier = $.SimpleCommandTestDoubleInputCommand$();
  notifier.initializeNotifier$1('SimpleCommandTest');
  $.expect(notifier.multitonKey, $.CTC13, null, null, false);
}
};

$$.Test_MacroCommand__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor', new $.Test_MacroCommand__tests_anon0());
  $.test('execute()', new $.Test_MacroCommand__tests_anon1());
  $.test('initializeNotifier()', new $.Test_MacroCommand__tests_anon2());
}
};

$$.Test_MacroCommand__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.MacroCommandTestCommand$(), $.CTC13, null, null, false);
}
};

$$.Test_MacroCommand__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var macroCommand = $.MacroCommandTestCommand$();
  var vo = $.MacroCommandTestVO$(5);
  macroCommand.execute$1($.Notification$('MacroCommandTest', vo, null));
  $.expect(vo.doubled, $.equals(10, 100), null, null, false);
  $.expect(vo.squared, $.equals(25, 100), null, null, false);
}
};

$$.Test_MacroCommand__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var notifier = $.MacroCommandTestCommand$();
  notifier.initializeNotifier$1('MacroCommandTest');
  $.expect(notifier.multitonKey, $.CTC13, null, null, false);
}
};

$$.MacroCommandTestCommand_initializeMacroCommand_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.MacroCommandTestDoubleInputCommand$();
}
};

$$.MacroCommandTestCommand_initializeMacroCommand_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.MacroCommandTestSquareInputCommand$();
}
};

$$.Test_Proxy__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor +name', new $.Test_Proxy__tests_anon0());
  $.test('getName(), .name', new $.Test_Proxy__tests_anon1());
  $.test('Constructor +data, getData(), .data', new $.Test_Proxy__tests_anon2());
  $.test('setData(), getData(), .data', new $.Test_Proxy__tests_anon3());
  $.test('initializeNotifier()', new $.Test_Proxy__tests_anon4());
}
};

$$.Test_Proxy__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Proxy$('TestProxy1', null), $.CTC13, null, null, false);
}
};

$$.Test_Proxy__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var proxy = $.Proxy$('TestProxy2', null);
  $.expect(proxy.getName$0(), $.equals('TestProxy2', 100), null, null, false);
  $.expect(proxy.name, $.equals('TestProxy2', 100), null, null, false);
}
};

$$.Test_Proxy__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var data = ['red', 'green', 'blue'];
  var proxy = $.Proxy$('TestProxy3', data);
  $.expect(proxy, $.CTC13, null, null, false);
  $.expect(proxy.getData$0(), $.same(data), null, null, false);
  $.expect(proxy.data, $.same(data), null, null, false);
}
};

$$.Test_Proxy__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var data = ['red', 'green', 'blue'];
  var proxy = $.Proxy$('TestProxy4', null);
  proxy.setData$1(data);
  $.expect(proxy.getData$0(), $.same(data), null, null, false);
  $.expect(proxy.data, $.same(data), null, null, false);
}
};

$$.Test_Proxy__tests_anon4 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var notifier = $.Proxy$('TestProxy5', null);
  notifier.initializeNotifier$1('ProxyTestKey');
  $.expect(notifier.multitonKey, $.CTC13, null, null, false);
}
};

$$.Test_Mediator__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('Constructor', new $.Test_Mediator__tests_anon0());
  $.test('getMediatorName()', new $.Test_Mediator__tests_anon1());
  $.test('Constructor +viewComponent, getViewComponent(), .viewComponent', new $.Test_Mediator__tests_anon2());
  $.test('setViewComponent(), getViewComponent()', new $.Test_Mediator__tests_anon3());
  $.test('initializeNotifier()', new $.Test_Mediator__tests_anon4());
}
};

$$.Test_Mediator__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Mediator$('TestMediator1', null), $.CTC13, null, null, false);
}
};

$$.Test_Mediator__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var mediator = $.Mediator$('TestMediator2', null);
  $.expect(mediator.getName$0(), $.equals('TestMediator2', 100), null, null, false);
  $.expect(mediator.name, $.equals('TestMediator2', 100), null, null, false);
}
};

$$.Test_Mediator__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var viewComponent = $.Object$();
  var mediator = $.Mediator$('TestMediator3', viewComponent);
  $.expect(mediator.getViewComponent$0(), $.same(viewComponent), null, null, false);
  $.expect(mediator.viewComponent, $.same(viewComponent), null, null, false);
}
};

$$.Test_Mediator__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var viewComponent = $.Object$();
  var mediator = $.Mediator$('TestMediator4', null);
  mediator.setViewComponent$1(viewComponent);
  $.expect(mediator.getViewComponent$0(), $.same(viewComponent), null, null, false);
  $.expect(mediator.viewComponent, $.same(viewComponent), null, null, false);
}
};

$$.Test_Mediator__tests_anon4 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var notifier = $.Mediator$('TestMediator5', null);
  notifier.initializeNotifier$1('MediatorTestKey');
  $.expect(notifier.multitonKey, $.CTC13, null, null, false);
}
};

$$.Test_Model__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('getInstance()', new $.Test_Model__tests_anon0());
  $.test('registerProxy(), hasProxy()', new $.Test_Model__tests_anon1());
  $.test('retrieveProxy()', new $.Test_Model__tests_anon2());
  $.test('removeProxy(), hasProxy()', new $.Test_Model__tests_anon3());
  $.test('Model calls onRegister()', new $.Test_Model__tests_anon4());
  $.test('Model calls onRemove()', new $.Test_Model__tests_anon5());
}
};

$$.Test_Model__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest1');
  $.expect(model, $.CTC13, null, null, false);
  $.expect(model, $.same($.Model_getInstance('ModelTest1')), null, null, false);
}
};

$$.Test_Model__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest2');
  model.registerProxy$1($.Proxy$('ModelTest2Proxy', null));
  $.expect(model.hasProxy$1('ModelTest2Proxy'), $.CTC20, null, null, false);
}
};

$$.Test_Model__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest3');
  var proxy = $.Proxy$('ModelTest3Proxy', null);
  model.registerProxy$1(proxy);
  $.expect(model.retrieveProxy$1('ModelTest3Proxy'), $.same(proxy), null, null, false);
}
};

$$.Test_Model__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest4');
  var proxy = $.Proxy$('ModelTest4Proxy', null);
  model.registerProxy$1(proxy);
  $.expect(model.removeProxy$1('ModelTest4Proxy'), $.same(proxy), null, null, false);
  $.expect(model.hasProxy$1('ModelTest4Proxy'), $.CTC21, null, null, false);
}
};

$$.Test_Model__tests_anon4 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest5');
  var proxy = $.ModelTestProxy$();
  model.registerProxy$1(proxy);
  $.expect(proxy.getData$0(), $.equals($.ModelTestProxy_ON_REGISTER_CALLED, 100), null, null, false);
}
};

$$.Test_Model__tests_anon5 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var model = $.Model_getInstance('ModelTest6');
  var proxy = $.ModelTestProxy$();
  model.registerProxy$1(proxy);
  model.removeProxy$1($.ModelTestProxy_NAME);
  $.expect(proxy.getData$0(), $.equals($.ModelTestProxy_ON_REMOVE_CALLED, 100), null, null, false);
}
};

$$.Test_View__tests_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  $.test('getInstance()', new $.Test_View__tests_anon0());
  $.test('registerMediator(), hasMediator()', new $.Test_View__tests_anon1());
  $.test('retrieveMediator()', new $.Test_View__tests_anon2());
  $.test('removeMediator()', new $.Test_View__tests_anon3());
  $.test('registerObserver(), notifyObserver()', new $.Test_View__tests_anon4(this.this_0));
  $.test('View calls onRegister()', new $.Test_View__tests_anon5());
  $.test('View calls onRemove()', new $.Test_View__tests_anon6());
  $.test('View calls listNotificationInterests()', new $.Test_View__tests_anon7());
  $.test('View calls handleNotification()', new $.Test_View__tests_anon8());
}
};

$$.Test_View__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest1');
  $.expect(view, $.CTC13, null, null, false);
  $.expect(view, $.same($.View_getInstance('ViewTest1')), null, null, false);
}
};

$$.Test_View__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest2');
  view.registerMediator$1($.Mediator$('ViewTest3Mediator', null));
  $.expect(view.hasMediator$1('ViewTest3Mediator'), $.CTC20, null, null, false);
}
};

$$.Test_View__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest3');
  var mediator = $.Mediator$('ViewTest3Mediator', null);
  view.registerMediator$1(mediator);
  $.expect(view.retrieveMediator$1('ViewTest3Mediator'), $.same(mediator), null, null, false);
}
};

$$.Test_View__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest4');
  view.registerMediator$1($.Mediator$('ViewTest4Mediator', null));
  $.expect(view.hasMediator$1('ViewTest4Mediator'), $.CTC20, null, null, false);
  view.removeMediator$1('ViewTest4Mediator');
  $.expect(view.hasMediator$1('ViewTest4Mediator'), $.CTC21, null, null, false);
}
};

$$.Test_View__tests_anon4 = {"":
 ["this_1"],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest5');
  var t1 = this.this_1;
  view.registerObserver$2('ViewTest5Note', $.Observer$(t1.get$viewTestMethod(), t1));
  view.notifyObservers$1($.Notification$('ViewTest5Note', null, null));
  $.expect(t1.get$viewTestVar(), $.equals('ViewTest5Note', 100), null, null, false);
}
};

$$.Test_View__tests_anon5 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest6');
  var vc = $.ViewTestViewComponent$();
  view.registerMediator$1($.ViewTestMediator$(vc));
  $.expect(view.hasMediator$1($.ViewTestMediator_NAME), $.CTC20, null, null, false);
  $.expect(vc.onRegisterCalled, $.CTC20, null, null, false);
}
};

$$.Test_View__tests_anon6 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest7');
  var vc = $.ViewTestViewComponent$();
  view.registerMediator$1($.ViewTestMediator$(vc));
  $.expect(view.hasMediator$1($.ViewTestMediator_NAME), $.CTC20, null, null, false);
  view.removeMediator$1($.ViewTestMediator_NAME);
  $.expect(vc.onRemoveCalled, $.CTC20, null, null, false);
}
};

$$.Test_View__tests_anon7 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest8');
  var vc = $.ViewTestViewComponent$();
  view.registerMediator$1($.ViewTestMediator$(vc));
  $.expect(vc.listNotificationInterestsCalled, $.CTC20, null, null, false);
}
};

$$.Test_View__tests_anon8 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var view = $.View_getInstance('ViewTest9');
  var vc = $.ViewTestViewComponent$();
  view.registerMediator$1($.ViewTestMediator$(vc));
  view.notifyObservers$1($.Notification$($.ViewTestNotes_NOTE_2, null, null));
  $.expect(vc.handleNotificationCalled, $.CTC20, null, null, false);
}
};

$$.Test_Controller__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('getInstance()', new $.Test_Controller__tests_anon0());
  $.test('registerCommand(), hasCommand()', new $.Test_Controller__tests_anon1());
  $.test('executeCommand() +SimpleCommand', new $.Test_Controller__tests_anon2());
  $.test('executeCommand() +MacroCommand', new $.Test_Controller__tests_anon3());
  $.test('removeCommand()', new $.Test_Controller__tests_anon4());
}
};

$$.Test_Controller__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var controller = $.Controller_getInstance('ControllerTest1');
  $.expect(controller, $.CTC13, null, null, false);
  $.expect(controller, $.same($.Controller_getInstance('ControllerTest1')), null, null, false);
}
};

$$.Test_Controller__tests_anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var controller = $.Controller_getInstance('ControllerTest2');
  controller.registerCommand$2('ControllerTest2Note', new $.Test_Controller__tests_anon8());
  $.expect(controller.hasCommand$1('ControllerTest2Note'), $.CTC20, null, null, false);
}
};

$$.Test_Controller__tests_anon8 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestMacroCommand$();
}
};

$$.Test_Controller__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var controller = $.Controller_getInstance('ControllerTest3');
  controller.registerCommand$2('ControllerTest3Note', new $.Test_Controller__tests_anon7());
  var vo = $.ControllerTestVO$(5);
  controller.executeCommand$1($.Notification$('ControllerTest3Note', vo, null));
  $.expect(vo.doubled, $.equals(10, 100), null, null, false);
  $.expect(vo.squared, $.equals(null, 100), null, null, false);
}
};

$$.Test_Controller__tests_anon7 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestDoubleInputCommand$();
}
};

$$.Test_Controller__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var controller = $.Controller_getInstance('ControllerTest4');
  controller.registerCommand$2('ControllerTest4Note', new $.Test_Controller__tests_anon6());
  var vo = $.ControllerTestVO$(5);
  controller.executeCommand$1($.Notification$('ControllerTest4Note', vo, null));
  $.expect(vo.doubled, $.equals(10, 100), null, null, false);
  $.expect(vo.squared, $.equals(25, 100), null, null, false);
}
};

$$.Test_Controller__tests_anon6 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestMacroCommand$();
}
};

$$.Test_Controller__tests_anon4 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var controller = $.Controller_getInstance('ControllerTest5');
  controller.registerCommand$2('ControllerTest5Note', new $.Test_Controller__tests_anon5());
  $.Expect_isTrue(controller.hasCommand$1('ControllerTest5Note'), null);
  controller.removeCommand$1('ControllerTest5Note');
  $.expect(controller.hasCommand$1('ControllerTest5Note'), $.CTC21, null, null, false);
}
};

$$.Test_Controller__tests_anon5 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestMacroCommand$();
}
};

$$.ControllerTestMacroCommand_initializeMacroCommand_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestDoubleInputCommand$();
}
};

$$.ControllerTestMacroCommand_initializeMacroCommand_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.ControllerTestSquareInputCommand$();
}
};

$$.Test_Facade__tests_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('getInstance()', new $.Test_Facade__tests_anon24());
  $.test('getInstance(), hasCore()', new $.Test_Facade__tests_anon25());
  $.test('removeCore(), hasCore()', new $.Test_Facade__tests_anon26());
}
};

$$.Test_Facade__tests_anon24 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest');
  $.expect(facade, $.CTC13, null, null, false);
  $.expect(facade, $.same($.Facade_getInstance('FacadeTest')), null, null, false);
  $.expect(facade.get$multitonKey(), $.equals('FacadeTest', 100), null, null, false);
  $.expect(facade.get$model(), $.CTC13, null, null, false);
  $.expect(facade.get$model().get$multitonKey(), $.equals('FacadeTest', 100), null, null, false);
  $.expect(facade.get$view(), $.CTC13, null, null, false);
  $.expect(facade.get$view().get$multitonKey(), $.equals('FacadeTest', 100), null, null, false);
  $.expect(facade.get$controller(), $.CTC13, null, null, false);
  $.expect(facade.get$controller().get$multitonKey(), $.equals('FacadeTest', 100), null, null, false);
}
};

$$.Test_Facade__tests_anon25 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.Expect_isFalse($.Facade_hasCore('FacadeTest0'), null);
  $.Facade_getInstance('FacadeTest0');
  $.Expect_isTrue($.Facade_hasCore('FacadeTest0'), null);
}
};

$$.Test_Facade__tests_anon26 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.Facade_getInstance('FacadeTest1');
  $.expect($.Facade_hasCore('FacadeTest1'), $.CTC20, null, null, false);
  $.Facade_removeCore('FacadeTest1');
  $.expect($.Facade_hasCore('FacadeTest1'), $.CTC21, null, null, false);
}
};

$$.Test_Facade__tests_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('registerCommand(), hasCommand()', new $.Test_Facade__tests_anon16());
  $.test('sendNotification() ->SimpleCommand', new $.Test_Facade__tests_anon17());
  $.test('sendNotification() ->MacroCommand', new $.Test_Facade__tests_anon18());
  $.test('removeCommand()', new $.Test_Facade__tests_anon19());
}
};

$$.Test_Facade__tests_anon16 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest2');
  facade.registerCommand$2('FacadeTest2Note', new $.Test_Facade__tests_anon23());
  $.expect(facade.hasCommand$1('FacadeTest2Note'), $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon23 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestMacroCommand$();
}
};

$$.Test_Facade__tests_anon17 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest3');
  facade.registerCommand$2('FacadeTest3Note', new $.Test_Facade__tests_anon22());
  var vo = $.FacadeTestVO$(5);
  facade.sendNotification$2('FacadeTest3Note', vo);
  $.expect(vo.doubled, $.equals(10, 100), null, null, false);
  $.expect(vo.squared, $.equals(null, 100), null, null, false);
}
};

$$.Test_Facade__tests_anon22 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestDoubleInputCommand$();
}
};

$$.Test_Facade__tests_anon18 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest4');
  facade.registerCommand$2('FacadeTest4Note', new $.Test_Facade__tests_anon21());
  var vo = $.FacadeTestVO$(5);
  facade.sendNotification$2('FacadeTest4Note', vo);
  $.expect(vo.doubled, $.equals(10, 100), null, null, false);
  $.expect(vo.squared, $.equals(25, 100), null, null, false);
}
};

$$.Test_Facade__tests_anon21 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestMacroCommand$();
}
};

$$.Test_Facade__tests_anon19 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest5');
  facade.registerCommand$2('FacadeTest5Note', new $.Test_Facade__tests_anon20());
  $.expect(facade.hasCommand$1('FacadeTest5Note'), $.CTC20, null, null, false);
  facade.removeCommand$1('FacadeTest5Note');
  $.expect(facade.hasCommand$1('FacadeTest5Note'), $.CTC21, null, null, false);
}
};

$$.Test_Facade__tests_anon20 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestMacroCommand$();
}
};

$$.Test_Facade__tests_anon1 = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  $.test('registerMediator(), hasMediator()', new $.Test_Facade__tests_anon8());
  $.test('retrieveMediator()', new $.Test_Facade__tests_anon9());
  $.test('removeMediator()', new $.Test_Facade__tests_anon10());
  $.test('registerObserver(), notifyObserver()', new $.Test_Facade__tests_anon11(this.this_0));
  $.test('registerMediator(), ->mediator.onRegister()', new $.Test_Facade__tests_anon12());
  $.test('removeMediator(), ->mediator.onRemove()', new $.Test_Facade__tests_anon13());
  $.test('registerMediator(), ->mediator.listNotificationInterests()', new $.Test_Facade__tests_anon14());
  $.test('sendNotification(), ->handleNotification()', new $.Test_Facade__tests_anon15());
}
};

$$.Test_Facade__tests_anon8 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest6');
  facade.registerMediator$1($.Mediator$('FacadeTest6Mediator', null));
  $.expect(facade.hasMediator$1('FacadeTest6Mediator'), $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon9 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest7');
  var mediator = $.Mediator$('FacadeTest7Mediator', null);
  facade.registerMediator$1(mediator);
  $.expect(facade.retrieveMediator$1('FacadeTest7Mediator'), $.same(mediator), null, null, false);
}
};

$$.Test_Facade__tests_anon10 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest8');
  facade.registerMediator$1($.Mediator$('FacadeTest8Mediator', null));
  $.expect(facade.hasMediator$1('FacadeTest8Mediator'), $.CTC20, null, null, false);
  facade.removeMediator$1('FacadeTest8Mediator');
  $.expect(facade.hasMediator$1('FacadeTest8Mediator'), $.CTC21, null, null, false);
}
};

$$.Test_Facade__tests_anon11 = {"":
 ["this_1"],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest8');
  facade.registerObserver$2('FacadeTest8Note', $.Observer$($.facadeTestMethod, this.this_1));
  facade.notifyObservers$1($.Notification$('FacadeTest8Note', null, null));
  $.expect($.facadeTestVar, $.equals('FacadeTest8Note', 100), null, null, false);
}
};

$$.Test_Facade__tests_anon12 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest9');
  var vc = $.FacadeTestViewComponent$();
  facade.registerMediator$1($.FacadeTestMediator$(vc));
  $.expect(facade.hasMediator$1($.FacadeTestMediator_NAME), $.CTC20, null, null, false);
  $.expect(vc.onRegisterCalled, $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon13 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest10');
  var vc = $.FacadeTestViewComponent$();
  facade.registerMediator$1($.FacadeTestMediator$(vc));
  $.expect(facade.hasMediator$1($.FacadeTestMediator_NAME), $.CTC20, null, null, false);
  facade.removeMediator$1($.FacadeTestMediator_NAME);
  $.expect(vc.onRemoveCalled, $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon14 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest11');
  var vc = $.FacadeTestViewComponent$();
  facade.registerMediator$1($.FacadeTestMediator$(vc));
  $.expect(vc.listNotificationInterestsCalled, $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon15 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest12');
  var vc = $.FacadeTestViewComponent$();
  facade.registerMediator$1($.FacadeTestMediator$(vc));
  facade.sendNotification$1($.FacadeTestNotes_NOTE_2);
  $.expect(vc.handleNotificationCalled, $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon2 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.test('registerProxy(), hasProxy()', new $.Test_Facade__tests_anon3());
  $.test('retrieveProxy()', new $.Test_Facade__tests_anon4());
  $.test('removeProxy(), hasProxy()', new $.Test_Facade__tests_anon5());
  $.test('registerProxy(), ->proxy.onRegister()', new $.Test_Facade__tests_anon6());
  $.test('removeProxy(), ->proxy.onRemove()', new $.Test_Facade__tests_anon7());
}
};

$$.Test_Facade__tests_anon3 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest13');
  facade.registerProxy$1($.Proxy$('FacadeTest13Proxy', null));
  $.expect(facade.hasProxy$1('FacadeTest13Proxy'), $.CTC20, null, null, false);
}
};

$$.Test_Facade__tests_anon4 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest14');
  var proxy = $.Proxy$('FacadeTest14Proxy', null);
  facade.registerProxy$1(proxy);
  $.expect(facade.retrieveProxy$1('FacadeTest14Proxy'), $.same(proxy), null, null, false);
}
};

$$.Test_Facade__tests_anon5 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest15');
  var proxy = $.Proxy$('FacadeTest15Proxy', null);
  facade.registerProxy$1(proxy);
  $.expect(facade.removeProxy$1('FacadeTest15Proxy'), $.same(proxy), null, null, false);
  $.expect(facade.hasProxy$1('FacadeTest15Proxy'), $.CTC21, null, null, false);
}
};

$$.Test_Facade__tests_anon6 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest16');
  var proxy = $.FacadeTestProxy$();
  facade.registerProxy$1(proxy);
  $.expect(proxy.getData$0(), $.equals($.FacadeTestProxy_ON_REGISTER_CALLED, 100), null, null, false);
}
};

$$.Test_Facade__tests_anon7 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  var facade = $.Facade_getInstance('FacadeTest17');
  var proxy = $.FacadeTestProxy$();
  facade.registerProxy$1(proxy);
  facade.removeProxy$1($.FacadeTestProxy_NAME);
  $.expect(proxy.getData$0(), $.equals($.FacadeTestProxy_ON_REMOVE_CALLED, 100), null, null, false);
}
};

$$.FacadeTestMacroCommand_initializeMacroCommand_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestDoubleInputCommand$();
}
};

$$.FacadeTestMacroCommand_initializeMacroCommand_anon0 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.FacadeTestSquareInputCommand$();
}
};

$$.startRootIsolate_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._EventLoop__runHelper_next = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.invokeClosure_anon = {"":
 ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":
 ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"":
 ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$.anon = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon0 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
 ['self', 'target'],
 'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure0 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure1 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$4: function(p0, p1, p2, p3) { return this.self[this.target](p0, p1, p2, p3); }
};
$.FacadeTestMacroCommand$ = function() {
  var t1 = new $.FacadeTestMacroCommand(null, null);
  t1.MacroCommand$0();
  return t1;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.MacroCommandTestDoubleInputCommand$ = function() {
  return new $.MacroCommandTestDoubleInputCommand(null);
};

$._Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.IllegalArgumentException$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.Test_Facade$ = function() {
  return new $.Test_Facade();
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();

};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.FacadeTestMediator$ = function(viewComponent) {
  return new $.FacadeTestMediator($.FacadeTestMediator_NAME, viewComponent, null);
};

$.group = function(description, body) {
  $.ensureInitialized();
  var parentGroup = $._currentGroup;
  if (!$.eqB($._currentGroup, ''))
    $._currentGroup = $.S($._currentGroup) + $.S($.groupSep) + description;
  else
    $._currentGroup = description;
  var parentSetup = $._testSetup;
  var parentTeardown = $._testTeardown;
  try {
    $._testSetup = null;
    $._testTeardown = null;
    body.call$0();
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    var trace = $.getTraceFromException(exception);
    t1 = trace;
    var stack = t1 == null ? '' : ': ' + $.S($.toString(t1));
    $._uncaughtErrorMessage = $.S($.toString(e)) + $.S(stack);
  }
 finally {
    $._currentGroup = parentGroup;
    $._testSetup = parentSetup;
    $._testTeardown = parentTeardown;
  }
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC24)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.buildDynamicMetadata = function(inputTable) {
  var result = [];
  for (var i = 0; i < inputTable.length; ++i) {
    var tag = inputTable[i][0];
    var array = inputTable[i];
    var tags = array[1];
    var set = {};
    var tagNames = tags.split('|');
    for (var j = 0, index = 1; j < tagNames.length; ++j) {
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.ListImplementation_List$from = function(other) {
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); t1.hasNext$0() === true;)
    result.push(t1.next$0());
  return result;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.hashCode = function(receiver) {
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (!(typeof receiver === 'string'))
    return receiver.hashCode$0();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; i < length$; ++i) {
    var hash0 = 536870911 & hash + receiver.charCodeAt(i);
    var hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
    hash = hash1;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.FutureImpl_FutureImpl$immediate = function(value) {
  var res = $.FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.Controller$ = function(key) {
  var t1 = new $.Controller(null, null, null);
  t1.Controller$1(key);
  return t1;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$.same = function(expected) {
  return $._IsSameAs$(expected);
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
};

$.toUpperCase = function(receiver) {
  if (!(typeof receiver === 'string'))
    return receiver.toUpperCase$0();
  return receiver.toUpperCase();
};

$.StringBuffer_StringBuffer = function(content$) {
  return $.StringBufferImpl$(content$);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _functionName, _arguments, existingArgumentNames);
};

$.Strings_join = function(strings, separator) {
  return $.StringImplementation_join(strings, separator);
};

$.StringImplementation_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), separator);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag = $.getTypeNameOf(obj);
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; i < $._dynamicMetadata0().length; ++i) {
      var entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.regExpMakeNative = function(regExp, global) {
  var pattern = regExp.get$pattern();
  var multiLine = regExp.get$multiLine();
  var ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  var sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.main = function() {
  $.Unit_Tests$().run$0();
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() : $.Primitives_lazyAsJsDate(receiver).getFullYear();
};

$.configureExpectFailureHandler = function(handler) {
  $._assertFailureHandler = handler == null ? $.DefaultFailureHandler$() : handler;
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() : $.Primitives_lazyAsJsDate(receiver).getHours();
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.Test_Controller$ = function() {
  return new $.Test_Controller();
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$.Test_Model$ = function() {
  return new $.Test_Model();
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._convertNativeToDart_IDBKey = function(nativeKey) {
  if (new $._convertNativeToDart_IDBKey_containsDate().call$1(nativeKey) === true)
    throw $.$$throw($.CTC19);
  return nativeKey;
};

$.DateImplementation$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateImplementation(millisecondsSinceEpoch, isUtc);
  t1.DateImplementation$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  else {
    $.checkNull(element);
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.Observer$ = function(notifyMethod, notifyContext) {
  return new $.Observer(notifyMethod, notifyContext);
};

$.StringBufferImpl$ = function(content$) {
  var t1 = new $.StringBufferImpl(null, null);
  t1.StringBufferImpl$1(content$);
  return t1;
};

$.facadeTestMethod = function(note) {
  $.facadeTestVar = note.getName$0();
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$.FacadeTestVO$ = function(input) {
  return new $.FacadeTestVO(input, null, null);
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() : $.Primitives_lazyAsJsDate(receiver).getDate();
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.iterator(keyValuePairs);
  var result = $.LinkedHashMapImplementation$();
  for (; iterator.hasNext$0() === true;)
    result.operator$indexSet$2(iterator.next$0(), iterator.next$0());
  return result;
};

$.equals = function(expected, limit) {
  return $._DeepMatcher$(expected, limit);
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; iterator.hasNext$0() === true;)
    $.add$1(receiver, iterator.next$0());
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.MultitonErrorFacadeExists$ = function() {
  return new $.MultitonErrorFacadeExists();
};

$.Expect__fail = function(message) {
  throw $.$$throw($.ExpectException$(message));
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.IllegalArgumentException$(value));
  return res;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.Mediator$ = function(name$, viewComponent) {
  return new $.Mediator(name$, viewComponent, null);
};

$._ReceivePortFactory_ReceivePort = function() {
  return $._ReceivePortImpl$();
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$.Test_Notification$ = function() {
  return new $.Test_Notification();
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.stringSplitUnchecked = function(receiver, pattern) {
  return receiver.split(pattern);
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$.Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.Unit_Tests_Config$ = function() {
  return new $.Unit_Tests_Config(null);
};

$._Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object);
};

$.ViewTestMediator$ = function(viewComponent) {
  return new $.ViewTestMediator($.ViewTestMediator_NAME, viewComponent, null);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; t2 = futures.length, i < t2; ++i) {
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    var future = futures[i];
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
  var t2;
};

$.DateImplementation$now = function() {
  var t1 = new $.DateImplementation($.Primitives_dateNow(), false);
  t1.DateImplementation$now$0();
  return t1;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      var t1 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t1;
    }
  else
    for (t1 = srcStart + count, i = srcStart, j = dstStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      var t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.IllegalArgumentException$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.IllegalArgumentException$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.MacroCommandTestCommand$ = function() {
  var t1 = new $.MacroCommandTestCommand(null, null);
  t1.MacroCommand$0();
  return t1;
};

$.Future_Future$immediate = function(value) {
  return $.FutureImpl_FutureImpl$immediate(value);
};

$.Proxy$ = function(name$, data) {
  return new $.Proxy(name$, data, null);
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.wrapMatcher = function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$Matcher)
    return x;
  else if (typeof x === 'function' || typeof x === 'object' && x !== null && !!x.is$Function)
    return $._Predicate$(x, 'satisfies function');
  else
    return $._DeepMatcher$(x, 100);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  if (from === '')
    if (receiver === '')
      return to;
    else {
      var result = $.StringBuffer_StringBuffer('');
      var length$ = receiver.length;
      $.add$1(result, to);
      for (var i = 0; i < length$; ++i) {
        if (i < 0 || i >= length$)
          throw $.ioore(i);
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC12, true), "\\$&"), false, false), true), to);
};

$._nextBatch = function() {
  for (; $.ltB($._currentTest, $.get$length($._tests));) {
    var testCase = $.index($._tests, $._currentTest);
    $.guardAsync(new $._nextBatch_anon(testCase), null, $._currentTest);
    if (testCase.get$isComplete() !== true && $.gtB(testCase.get$callbackFunctionsOutstanding(), 0))
      return;
    $._currentTest = $.add($._currentTest, 1);
  }
  $._completeTests();
};

$.Unit_Tests$ = function() {
  var t1 = new $.Unit_Tests();
  t1.Unit_Tests$0();
  return t1;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.Test_SimpleCommand$ = function() {
  return new $.Test_SimpleCommand();
};

$.MultitonErrorModelExists$ = function() {
  return new $.MultitonErrorModelExists();
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.FacadeTestDoubleInputCommand$ = function() {
  return new $.FacadeTestDoubleInputCommand(null);
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.Facade_hasCore = function(key) {
  return !($.index($.Facade_instanceMap, key) == null);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
return document.createElement(tag)
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.guardAsync = function(tryBody, finallyBody, testNum) {
  if ($.ltB(testNum, 0))
    testNum = $._currentTest;
  try {
    return tryBody.call$0();
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    var trace = $.getTraceFromException(exception);
    $._registerException(testNum, e, trace);
  }
 finally {
    t1 = finallyBody;
    if (!(t1 == null))
      t1.call$0();
  }
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.Test_Observer$ = function() {
  return new $.Test_Observer(null);
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$._ElementList$ = function(list) {
  return new $._ElementList(list);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !($.indexOf$2(receiver, other, startIndex) === -1);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.Expect_isFalse = function(actual, reason) {
  if (!actual)
    return;
  var msg = reason == null ? '' : ', \'' + $.S(reason) + '\'';
  $.Expect__fail('Expect.isFalse(' + $.S(actual) + msg + ') fails.');
};

$.ControllerTestVO$ = function(input) {
  return new $.ControllerTestVO(input, null, null);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.startsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.startsWith$1(other);
  $.checkString(other);
  var length$ = other.length;
  if (length$ > receiver.length)
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.IllegalArgumentException$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.IllegalArgumentException$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = start + length$;
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $.DateImplementation$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$.ObjectNotClosureException$ = function() {
  return new $.ObjectNotClosureException();
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.getOrCreateExpectFailureHandler = function() {
  if ($._assertFailureHandler == null)
    $.configureExpectFailureHandler(null);
  return $._assertFailureHandler;
};

$.remainder = function(a, b) {
  if ($.checkNumbers(a, b))
    return a % b;
  else
    return a.remainder$1(b);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.print = function(obj) {
  if (typeof obj === 'string')
    $.Primitives_printString(obj);
  else
    $.Primitives_printString($.toString(obj));
};

$.MultitonErrorViewExists$ = function() {
  return new $.MultitonErrorViewExists();
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.StackOverflowException$ = function() {
  return new $.StackOverflowException();
};

$.Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
};

$.runTests = function() {
  $._currentTest = 0;
  $._currentGroup = '';
  if (!($._soloTest == null))
    $.filterTests(new $.runTests_anon());
  $._config.onStart$0();
  $._defer(new $.runTests_anon0());
};

$._Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
};

$._convertNativeToDart_AcceptStructuredClone = function(object) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1, t2).call$1(object);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.FacadeTestSquareInputCommand$ = function() {
  return new $.FacadeTestSquareInputCommand(null);
};

$.Test_Proxy$ = function() {
  return new $.Test_Proxy();
};

$.Date_Date$now = function() {
  return $.DateImplementation$now();
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'Safari'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.MacroCommandTestSquareInputCommand$ = function() {
  return new $.MacroCommandTestSquareInputCommand(null);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.IllegalArgumentException$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.removeRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(t1));
  var t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.ListImplementation_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.document = function() {
return document;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$.ViewTestViewComponent$ = function() {
  return new $.ViewTestViewComponent(false, false, false, false);
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$.isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.isEmpty$0();
};

$.filterTests = function(testFilter) {
  if (typeof testFilter === 'string')
    var filterFunction = new $.filterTests_anon($.JSSyntaxRegExp$(testFilter, false, false));
  else if (typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$RegExp)
    filterFunction = new $.filterTests_anon0(testFilter);
  else
    filterFunction = typeof testFilter === 'function' || typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$Function ? testFilter : null;
  $._tests = $.filter($._tests, filterFunction);
};

$.Notification$ = function(name$, body, type) {
  return new $.Notification(name$, type, body);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.ModelTestProxy$ = function() {
  var t1 = new $.ModelTestProxy($.ModelTestProxy_NAME, null, null);
  t1.ModelTestProxy$0();
  return t1;
};

$.UnsupportedOperationException$ = function(_message) {
  return new $.UnsupportedOperationException(_message);
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._fullSpec = function(spec) {
  return !$.eqB($._currentGroup, '') ? $.S($._currentGroup) + $.S($.groupSep) + spec : spec;
};

$.MacroCommandTestVO$ = function(input) {
  return new $.MacroCommandTestVO(input, null, null);
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object") {
    console.log(string);
    return;
  }
  if (typeof write == "function") {
    write(string);
    write("\n");
  }
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() : $.Primitives_lazyAsJsDate(receiver).getMilliseconds();
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.test = function(spec, body) {
  $.ensureInitialized();
  $.add$1($._tests, $.TestCase$($.add($.get$length($._tests), 1), $._fullSpec(spec), body, 0));
};

$._IsSameAs$ = function(_expected) {
  return new $._IsSameAs(_expected);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.ExceptionImplementation$ = function(message) {
  return new $.ExceptionImplementation(message);
};

$.Test_MacroCommand$ = function() {
  return new $.Test_MacroCommand();
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.SimpleCommandTestVO$ = function(input) {
  return new $.SimpleCommandTestVO(input, null);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$._globalState = function() {
return $globalState;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$._globalState0 = function(val) {
$globalState = val;
};

$.window = function() {
return window;
};

$.HashMapImplementation$ = function() {
  var t1 = new $.HashMapImplementation(null, null, null, null, null);
  t1.HashMapImplementation$0();
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() : $.Primitives_lazyAsJsDate(receiver).getMinutes();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$._FixedSizeListIterator$ = function(array) {
  return new $._FixedSizeListIterator($.get$length(array), array, 0);
};

$.Test_View$ = function() {
  return new $.Test_View(null);
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.Completer_Completer = function() {
  return $.CompleterImpl$();
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.get$length(receiver) === 0)
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.Object$ = function() {
  return new $.Object();
};

$.expect = function(actual, matcher, reason, failureHandler, verbose) {
  matcher = $.wrapMatcher(matcher);
  var doesMatch = null;
  var matchState = $.MatchState$(null);
  try {
    doesMatch = matcher.matches$2(actual, matchState);
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    var trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      t1 = typeof t1 === 'string';
      var t2 = e;
      reason = $.S(t1 ? t2 : $.toString(t2)) + ' at ' + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null)
      failureHandler = $.getOrCreateExpectFailureHandler();
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.last$0();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.CompleterImpl$ = function() {
  return new $.CompleterImpl($.FutureImpl$());
};

$.FacadeTestProxy$ = function() {
  var t1 = new $.FacadeTestProxy($.FacadeTestProxy_NAME, null, null);
  t1.FacadeTestProxy$0();
  return t1;
};

$.Model_getInstance = function(key) {
  if (key == null || $.eqB(key, ''))
    return;
  if ($.Model_instanceMap == null)
    $.Model_instanceMap = $.HashMapImplementation$();
  if ($.index($.Model_instanceMap, key) == null)
    $.indexSet($.Model_instanceMap, key, $.Model$(key));
  return $.index($.Model_instanceMap, key);
};

$.throwRuntimeError = function(message) {
  throw $.$$throw($.RuntimeError$(message));
};

$.configure = function(config) {
  var _oldConfig = $._config;
  $._config = config;
  return _oldConfig;
};

$.ControllerTestSquareInputCommand$ = function() {
  return new $.ControllerTestSquareInputCommand(null);
};

$.View_getInstance = function(key) {
  if (key == null || $.eqB(key, ''))
    return;
  if ($.View_instanceMap == null)
    $.View_instanceMap = $.HashMapImplementation$();
  if ($.index($.View_instanceMap, key) == null)
    $.indexSet($.View_instanceMap, key, $.View$(key));
  return $.index($.View_instanceMap, key);
};

$.iae = function(argument) {
  throw $.$$throw($.IllegalArgumentException$(argument));
};

$.Controller_getInstance = function(key) {
  if (key == null || $.eqB(key, ''))
    return;
  if ($.Controller_instanceMap == null)
    $.Controller_instanceMap = $.HashMapImplementation$();
  if ($.index($.Controller_instanceMap, key) == null)
    $.indexSet($.Controller_instanceMap, key, $.Controller$(key));
  return $.index($.Controller_instanceMap, key);
};

$.Facade_getInstance = function(key) {
  if (key == null || $.eqB(key, ''))
    return;
  if ($.Facade_instanceMap == null)
    $.Facade_instanceMap = $.HashMapImplementation$();
  if ($.index($.Facade_instanceMap, key) == null)
    $.indexSet($.Facade_instanceMap, key, $.Facade$(key));
  return $.index($.Facade_instanceMap, key);
};

$.ExpectException$ = function(message) {
  return new $.ExpectException(message);
};

$.StringImplementation__toJsStringArray = function(strings) {
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; i < length$; ++i) {
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.split = function(receiver, pattern) {
  if (!(typeof receiver === 'string'))
    return receiver.split$1(pattern);
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.Expect_isTrue = function(actual, reason) {
  if (actual === true)
    return;
  var msg = reason == null ? '' : ', \'' + $.S(reason) + '\'';
  $.Expect__fail('Expect.isTrue(' + $.S(actual) + msg + ') fails.');
};

$.Facade_removeCore = function(key) {
  if ($.index($.Facade_instanceMap, key) == null)
    return;
  $.indexSet($.Model_instanceMap, key, null);
  $.indexSet($.View_instanceMap, key, null);
  $.indexSet($.Controller_instanceMap, key, null);
  $.indexSet($.Facade_instanceMap, key, null);
};

$.constructorNameFallback = function(object) {
  if (object == null)
    return 'Null';
  var constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  var string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.Test_Mediator$ = function() {
  return new $.Test_Mediator();
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      if (typeof name$ === 'string' && $.startsWith(name$, 'call$') === true)
        return $.ObjectNotClosureException$();
      else
        return $.NullPointerException$(null, $.CTC0);
    else if ($.eqB(type, 'undefined_method'))
      if (typeof name$ === 'string' && $.startsWith(name$, 'call$') === true)
        return $.ObjectNotClosureException$();
      else
        return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC0);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          var t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    return $.ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowException$();
    return $.IllegalArgumentException$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowException$();
  return ex;
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.IllegalArgumentException$(b));
    }
  return false;
};

$.Configuration$ = function() {
  return new $.Configuration(null);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._registerException = function(testNum, e, trace) {
  trace = trace == null ? '' : $.toString(trace);
  if ($.index($._tests, testNum).get$result() == null) {
    var message = typeof e === 'object' && e !== null && !!e.is$ExpectException ? e.message : 'Caught ' + $.S(e);
    $.index($._tests, testNum).fail$2(message, trace);
  } else
    $.index($._tests, testNum).error$2('Caught ' + $.S(e), trace);
  if ($.eqB(testNum, $._currentTest) && $.gtB($.index($._tests, testNum).get$callbackFunctionsOutstanding(), 0)) {
    $._currentTest = $.add($._currentTest, 1);
    $._testRunner.call$0();
  }
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var t1 = a.length;
  if (startIndex >= t1)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Model$ = function(key) {
  var t1 = new $.Model(null, null);
  t1.Model$1(key);
  return t1;
};

$.ControllerTestDoubleInputCommand$ = function() {
  return new $.ControllerTestDoubleInputCommand(null);
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$.SimpleCommandTestDoubleInputCommand$ = function() {
  return new $.SimpleCommandTestDoubleInputCommand(null);
};

$.contains = function(userAgent, name$) {
  return !(userAgent.indexOf(name$) === -1);
};

$.endsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.endsWith$1(other);
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() : $.Primitives_lazyAsJsDate(receiver).getSeconds();
};

$.FacadeTestViewComponent$ = function() {
  return new $.FacadeTestViewComponent(false, false, false, false);
};

$.IllegalArgumentException$ = function(arg) {
  return new $.IllegalArgumentException(arg);
};

$.MultitonErrorControllerExists$ = function() {
  return new $.MultitonErrorControllerExists();
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description = $.StringDescription$('');
  $.add$1(description.add$1('Expected: ').addDescriptionOf$1(matcher), '\n     but: ');
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  description.add$1('.\n');
  if (verbose === true && typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable()))
    $.add$1(description.add$1('Actual: ').addDescriptionOf$1(actual), '\n');
  if (!(reason == null))
    $.add$1(description.add$1(reason), '\n');
  return description.toString$0();
};

$._defer = function(callback) {
  var port = $._ReceivePortFactory_ReceivePort();
  port.receive$1(new $._defer_anon(port, callback));
  port.toSendPort$0().send$2(null, null);
};

$.ensureInitialized = function() {
  if ($._initialized === true)
    return;
  $._initialized = true;
  $._tests = [];
  $._testRunner = $._nextBatch;
  $._uncaughtErrorMessage = null;
  if ($._config == null)
    $._config = $.Configuration$();
  $._config.onInit$0();
  if ($._config.get$autoStart() === true)
    $._defer($.runTests);
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator(c); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.TestCase$ = function(id, description, test, callbackFunctionsOutstanding) {
  var t1 = $._currentGroup;
  return new $.TestCase(id, description, $._testSetup, $._testTeardown, test, callbackFunctionsOutstanding, '', null, null, t1, null, null, true, false);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._Deserializer_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$.propertySet = function(object, property, value) {
  object[property] = value;
};

$.Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.JSSyntaxRegExp$ = function(pattern, multiLine, ignoreCase) {
  return new $.JSSyntaxRegExp(ignoreCase, multiLine, pattern);
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.KeyValuePair$ = function(key, value) {
  return new $.KeyValuePair(key, value);
};

$.ControllerTestMacroCommand$ = function() {
  var t1 = new $.ControllerTestMacroCommand(null, null);
  t1.MacroCommand$0();
  return t1;
};

$.Facade$ = function(key) {
  var t1 = new $.Facade(null, null, null, null);
  t1.Facade$1(key);
  return t1;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.View$ = function(key) {
  var t1 = new $.View(null, null, null);
  t1.View$1(key);
  return t1;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function() {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$._completeTests = function() {
  if ($._initialized !== true)
    return;
  for (var t1 = $.iterator($._tests), testsFailed_ = 0, testsPassed_ = 0, testsErrors_ = 0; t1.hasNext$0() === true;)
    switch (t1.next$0().get$result()) {
      case 'pass':
        ++testsPassed_;
        break;
      case 'fail':
        ++testsFailed_;
        break;
      case 'error':
        ++testsErrors_;
        break;
    }
  $._config.onDone$5(testsPassed_, testsFailed_, testsErrors_, $._tests, $._uncaughtErrorMessage);
  $._initialized = false;
};

$.FutureImpl$ = function() {
  return new $.FutureImpl(false, null, null, null, false, [], [], []);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$.Duration$ = function(days, hours, minutes, seconds, milliseconds) {
  var t1 = days * 86400000 + hours * 3600000 + minutes * 60000 + seconds * 1000;
  if (typeof milliseconds !== 'number')
    throw $.iae(milliseconds);
  return new $.Duration(t1 + milliseconds);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.Arrays_copy$bailout = function(state, src, srcStart, dst, dstStart, count) {
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (var t1 = srcStart + count, i = srcStart, j = dstStart; i < t1; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$._Lists_getRange$bailout = function(state, a, start, length$, accumulator) {
  if ($.ltB(length$, 0))
    throw $.$$throw($.IllegalArgumentException$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.StringImplementation__toJsStringArray$bailout = function(state, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.ltB(i, length$); ++i) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Futures_wait$bailout = function(state, futures, t1) {
  if ($.isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    var future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.runTests.call$0 = $.runTests;
$.runTests.$name = "runTests";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.facadeTestMethod.call$1 = $.facadeTestMethod;
$.facadeTestMethod.$name = "facadeTestMethod";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._nextBatch.call$0 = $._nextBatch;
$._nextBatch.$name = "_nextBatch";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC25 = 'structured clone of ArrayBufferView';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC26 = null;
$.CTC23 = new Isolate.$isolateProperties.NotImplementedException(null);
$.CTC10 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC27 = false;
$.CTC28 = '^#[_a-zA-Z]\\w*$';
$.CTC16 = new Isolate.$isolateProperties.JSSyntaxRegExp(false, false, '^#[_a-zA-Z]\\w*$');
$.CTC29 = 'structured clone of ArrayBuffer';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC18 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC30 = 'structured clone of Date';
$.CTC2 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC24 = new Isolate.$isolateProperties.Object();
$.CTC31 = 'IDBKey containing Date';
$.CTC19 = new Isolate.$isolateProperties.NotImplementedException('IDBKey containing Date');
$.CTC32 = 'Cannot add to immutable List.';
$.CTC1 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot add to immutable List.');
$.CTC33 = '[-[\\]{}()*+?.,\\\\^$|#\\s]';
$.CTC12 = new Isolate.$isolateProperties.JSSyntaxRegExp(false, false, '[-[\\]{}()*+?.,\\\\^$|#\\s]');
$.CTC34 = 'structured clone of Blob';
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC35 = 'Cannot removeRange on immutable List.';
$.CTC22 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeRange on immutable List.');
$.CTC36 = 'structured clone of RegExp';
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC37 = 'structured clone of FileList';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of FileList');
$.CTC13 = new Isolate.$isolateProperties._IsNotNull();
$.CTC20 = new Isolate.$isolateProperties._IsTrue();
$.CTC21 = new Isolate.$isolateProperties._IsFalse();
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC38 = 'structured clone of other type';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC17 = new Isolate.$isolateProperties.EmptyQueueException();
$.CTC39 = 'structured clone of File';
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC40 = 'Invalid list length';
$.CTC15 = new Isolate.$isolateProperties.IllegalArgumentException('Invalid list length');
$.CTC41 = '';
$.CTC14 = new Isolate.$isolateProperties.UnsupportedOperationException('');
$.CTC42 = 'Cannot removeLast on immutable List.';
$.CTC11 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeLast on immutable List.');
$.Duration_MILLISECONDS_PER_DAY = 86400000;
$.Model_instanceMap = null;
$.View_instanceMap = null;
$.Controller_instanceMap = null;
$.Facade_instanceMap = null;
$.Duration_HOURS_PER_DAY = 24;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC18;
$._FAIL = 'fail';
$._testSetup = null;
$.DateImplementation__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$._currentTest = 0;
$.Primitives_hashCodeSeed = 0;
$._PASS = 'pass';
$.groupSep = ' ';
$._ERROR = 'error';
$.ModelTestProxy_FRESH = 'Fresh Instance';
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.ModelTestProxy_ON_REMOVE_CALLED = 'onRemove() Called';
$.FacadeTestProxy_ON_REMOVE_CALLED = 'onRemove() Called';
$.Duration_MINUTES_PER_HOUR = 60;
$.FacadeTestProxy_FRESH = 'Fresh Instance';
$.Duration_SECONDS_PER_MINUTE = 60;
$.ViewTestNotes_NOTE_3 = 'ViewTest/note/name/3';
$.FacadeTestNotes_NOTE_3 = 'FacadeTest/note/name/3';
$.ViewTestNotes_NOTE_1 = 'ViewTest/note/name/1';
$.FacadeTestNotes_NOTE_1 = 'FacadeTest/note/name/1';
$._tests = null;
$._testTeardown = null;
$.ModelTestProxy_NAME = 'ModelTestProxyClass';
$.ViewTestMediator_NAME = 'ViewTestMediator';
$._currentGroup = '';
$.FacadeTestProxy_NAME = 'FacadeTestProxyClass';
$._assertErrorFormatter = null;
$.FacadeTestMediator_NAME = 'FacadeTestMediator';
$._initialized = false;
$.isTrue = Isolate.$isolateProperties.CTC20;
$._ReceivePortImpl__nextFreeId = 1;
$._cachedBrowserPrefix = null;
$._TimerFactory__factory = null;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Duration_MILLISECONDS_PER_MINUTE = 60000;
$.facadeTestVar = null;
$._testRunner = null;
$._soloTest = null;
$._assertFailureHandler = null;
$.ViewTestNotes_NOTE_2 = 'ViewTest/note/name/2';
$.FacadeTestNotes_NOTE_2 = 'FacadeTest/note/name/2';
$._uncaughtErrorMessage = null;
$.Duration_MILLISECONDS_PER_SECOND = 1000;
$.Duration_MILLISECONDS_PER_HOUR = 3600000;
$.isNotNull = Isolate.$isolateProperties.CTC13;
$.ModelTestProxy_ON_REGISTER_CALLED = 'onRegister() Called';
$._getTypeNameOf = null;
$.FacadeTestProxy_ON_REGISTER_CALLED = 'onRegister() Called';
$._config = null;
$.isFalse = Isolate.$isolateProperties.CTC21;
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, fields, methods) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], methods);
  }
  for (var method in methods) {
    $.dynamicFunction(method)[cls] = methods[method];
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$Iterable: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Blob: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$File: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Element: function() { return false; },
 is$List: function() { return false; },
 is$Map: function() { return false; },
 is$FileList: function() { return false; },
 is$Collection: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 hashCode$0: function() { return $.hashCodeForNativeObject(this); },
 is$ImageData: function() { return false; }
});

$.$defineNativeClass('HTMLAnchorElement', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', ["name?"], {
});

$.$defineNativeClass('WebKitAnimationList', ["length?"], {
});

$.$defineNativeClass('HTMLAppletElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', [], {
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', [], {
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', ["name?", "value="], {
});

$.$defineNativeClass('AudioBuffer', ["length?"], {
});

$.$defineNativeClass('HTMLAudioElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('AudioParam', ["name?", "value="], {
});

$.$defineNativeClass('HTMLBRElement', [], {
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Blob', [], {
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', ["name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', ["name?"], {
});

$.$defineNativeClass('WebKitCSSMatrix', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSRuleList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', ["length?"], {
 getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); }
});

$.$defineNativeClass('WebKitCSSTransformValue', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSValueList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('CharacterData', ["length?"], {
});

$.$defineNativeClass('ClientRectList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
$.$defineNativeClass('HTMLContentElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMError', ["name?"], {
});

$.$defineNativeClass('DOMException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', ["name?"], {
});

$.$defineNativeClass('DOMFileSystemSync', ["name?"], {
});

$.$defineNativeClass('DOMMimeTypeArray', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMMimeType', ["description?"], {
});

$.$defineNativeClass('DOMPluginArray', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMPlugin', ["description?", "length?", "name?"], {
});

$.$defineNativeClass('DOMSelection', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', ["value="], {
});

$.$defineNativeClass('DOMStringList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', ["length?"], {
 add$1: function(token) {
  return this.add(token);
},
 remove$1: function(token) {
  return this.remove(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItemList', ["length?"], {
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', [], {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', [], {
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', [], {
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.FilteredElementList$(this);
  return this._elements;
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$innerHTML: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$innerHTML')) {
  {
  var e = $.Element_Element$tag('div');
  $.add$1(e.get$nodes(), this.clone$1(true));
  return e.get$innerHTML();
}
  } else {
    return Object.prototype.get$innerHTML.call(this);
  }

},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  $.clear(this.get$nodes());
  var e = $.Element_Element$tag('div');
  e.set$innerHTML(value);
  var nodes = $.ListImplementation_List$from(e.get$nodes());
  $.addAll(this.get$nodes(), nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', [], {
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.CTC16.hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentType', ["name?"], {
});

$.$defineNativeClass('Element', ["id?", "innerHTML="], {
 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$$$dom_children: function() {
return this.children;
},
 get$$$dom_firstElementChild: function() {
return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
return this.lastElementChild;
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntryArray', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Entry', ["name?"], {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', ["name?"], {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', ["message?"], {
});

$.$defineNativeClass('EventException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', [], {
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('HTMLFieldSetElement', ["elements?", "name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('FileException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('File', ["name?"], {
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('FileReader', ["result?"], {
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); }
});

$.$defineNativeClass('FileWriter', ["length?"], {
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); }
});

$.$defineNativeClass('FileWriterSync', ["length?"], {
});

$.$defineNativeClass('Float32Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', ["length?", "name?"], {
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Gamepad', ["id?"], {
});

$.$defineNativeClass('GamepadList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLHRElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', [], {
 get$length: function() {
return this.length;
},
 set$length: function(value) {
this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', ["length?"], {
});

$.$defineNativeClass('HTMLHtmlElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBCursor', [], {
 get$key: function() {
  return $._convertNativeToDart_IDBKey(this.get$_key());
},
 get$_key: function() {
return this.key;
}
});

$.$defineNativeClass('IDBCursorWithValue', [], {
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
return this.value;
}
});

$.$defineNativeClass('IDBDatabaseException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBDatabase', ["name?"], {
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('IDBIndex', ["name?"], {
});

$.$defineNativeClass('IDBObjectStore', ["name?"], {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBRequest', [], {
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 get$result: function() {
  return $._convertNativeToDart_IDBAny(this.get$_result());
},
 get$_result: function() {
return this.result;
}
});

$.$defineNativeClass('IDBTransaction', [], {
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); }
});

$.$defineNativeClass('HTMLIFrameElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ImageData', [], {
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', ["name?"], {
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', ["name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', ["value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Location', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLMapElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMediaElement', ["controller?"], {
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaKeyEvent', ["message?"], {
});

$.$defineNativeClass('MediaList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaQueryList', [], {
 matches$2: function(arg0, arg1) { return this.matches.call$2(arg0, arg1); }
});

$.$defineNativeClass('MediaStreamList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackList', ["length?"], {
 add$1: function(track) {
  return this.add(track);
},
 remove$1: function(track) {
  return this.remove(track);
}
});

$.$defineNativeClass('HTMLMenuElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageEvent', ["ports?"], {
});

$.$defineNativeClass('MessagePort', [], {
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLMetaElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', ["value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('NamedNodeMap', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Navigator', ["userAgent?"], {
});

$.$defineNativeClass('Node', [], {
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
  return this;
},
 replaceWith$1: function(otherNode) {
  try {
    var parent$ = this.get$parent();
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_childNodes: function() {
return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
this.textContent = value;
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 clone$1: function(deep) {
  if (Object.getPrototypeOf(this).hasOwnProperty('clone$1')) {
  {
  return this.cloneNode(deep);
}
  } else {
    return Object.prototype.clone$1.call(this, deep);
  }

},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', ["length?"], {
 iterator$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('iterator$0')) {
  {
  return $._FixedSizeListIterator$(this);
}
  } else {
    return Object.prototype.iterator$0.call(this);
  }

},
 add$1: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('add$1')) {
  {
  this._parent.$dom_appendChild$1(value);
}
  } else {
    return Object.prototype.add$1.call(this, value);
  }

},
 addLast$1: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('addLast$1')) {
  {
  this._parent.$dom_appendChild$1(value);
}
  } else {
    return Object.prototype.addLast$1.call(this, value);
  }

},
 addAll$1: function(collection) {
  if (Object.getPrototypeOf(this).hasOwnProperty('addAll$1')) {
  {
  for (var t1 = $.iterator(collection), t2 = this._parent; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
}
  } else {
    return Object.prototype.addAll$1.call(this, collection);
  }

},
 removeLast$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('removeLast$0')) {
  {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
}
  } else {
    return Object.prototype.removeLast$0.call(this);
  }

},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('operator$indexSet$2')) {
  {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
}
  } else {
    return Object.prototype.operator$indexSet$2.call(this, index, value);
  }

},
 forEach$1: function(f) {
  if (Object.getPrototypeOf(this).hasOwnProperty('forEach$1')) {
  {
  return $._Collections_forEach(this, f);
}
  } else {
    return Object.prototype.forEach$1.call(this, f);
  }

},
 map$1: function(f) {
  if (Object.getPrototypeOf(this).hasOwnProperty('map$1')) {
  {
  return $._Collections_map(this, [], f);
}
  } else {
    return Object.prototype.map$1.call(this, f);
  }

},
 filter$1: function(f) {
  if (Object.getPrototypeOf(this).hasOwnProperty('filter$1')) {
  {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
}
  } else {
    return Object.prototype.filter$1.call(this, f);
  }

},
 isEmpty$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('isEmpty$0')) {
  {
  return $.eq($.get$length(this), 0);
}
  } else {
    return Object.prototype.isEmpty$0.call(this);
  }

},
 last$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('last$0')) {
  {
  return this.operator$index$1($.sub($.get$length(this), 1));
}
  } else {
    return Object.prototype.last$0.call(this);
  }

},
 get$first: function() {
  return this.operator$index$1(0);
},
 removeRange$2: function(start, rangeLength) {
  if (Object.getPrototypeOf(this).hasOwnProperty('removeRange$2')) {
  {
  throw $.$$throw($.UnsupportedOperationException$('Cannot removeRange on immutable List.'));
}
  } else {
    return Object.prototype.removeRange$2.call(this, start, rangeLength);
  }

},
 getRange$2: function(start, rangeLength) {
  if (Object.getPrototypeOf(this).hasOwnProperty('getRange$2')) {
  {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
}
  } else {
    return Object.prototype.getRange$2.call(this, start, rangeLength);
  }

},
 operator$index$1: function(index) {
  if (Object.getPrototypeOf(this).hasOwnProperty('operator$index$1')) {
  {
return this[index];
}
  } else {
    return Object.prototype.operator$index$1.call(this, index);
  }

},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Notification', [], {
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('HTMLOListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', ["value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOutputElement', ["name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', ["name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', [], {
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('PositionError', ["message?"], {
});

$.$defineNativeClass('HTMLPreElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', ["value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', [], {
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('RadioNodeList', ["value="], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('RangeException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Range', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SQLError', ["message?"], {
});

$.$defineNativeClass('SQLException', ["message?"], {
});

$.$defineNativeClass('SQLResultSetRowList', ["length?"], {
});

$.$defineNativeClass('SVGAElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAngle', ["value="], {
});

$.$defineNativeClass('SVGAnimateColorElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLengthList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDocument', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElement', [], {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 set$elements: function(value) {
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
},
 get$innerHTML: function() {
  var container = $.Element_Element$tag('div');
  var cloned = this.clone$1(true);
  $.addAll(container.get$elements(), cloned.get$elements());
  return container.get$innerHTML();
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$elements(container.get$elements().get$first().get$elements());
},
 get$id: function() {
return this.id;
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', ["result?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLength', ["value="], {
});

$.$defineNativeClass('SVGLengthList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMetadataElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGNumber', ["value="], {
});

$.$defineNativeClass('SVGNumberList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPatternElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPointList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRadialGradientElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSVGElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStringList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTransformList', [], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSelectElement', ["length=", "name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', ["innerHTML="], {
 clone$1: function(deep) {
  return this.cloneNode(deep);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', ["name?"], {
});

$.$defineNativeClass('SourceBufferList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionError', ["message?"], {
});

$.$defineNativeClass('SpeechRecognitionEvent', ["result?"], {
});

$.$defineNativeClass('SpeechRecognitionResult', ["length?"], {
});

$.$defineNativeClass('SpeechRecognitionResultList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('StorageEvent', ["key?"], {
});

$.$defineNativeClass('Storage', [], {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 isEmpty$0: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('HTMLStyleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', ["name?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextTrackCue', ["id?", "text!"], {
});

$.$defineNativeClass('TextTrackCueList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TextTrackList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TimeRanges', ["length?"], {
});

$.$defineNativeClass('HTMLTitleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TouchList', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TreeWalker', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('UIEvent', ["view?"], {
});

$.$defineNativeClass('HTMLUListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', ["length?"], {
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', ["name?"], {
});

$.$defineNativeClass('WebKitCSSFilterValue', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', ["name?"], {
});

$.$defineNativeClass('WebSocket', [], {
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
}
});

$.$defineNativeClass('DOMWindow', ["length?", "name?", "navigator?"], {
 close$0: function() {
  return this.close();
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerContext', ["navigator?"], {
 close$0: function() {
  return this.close();
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('Worker', [], {
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerLocation', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', ["userAgent?"], {
});

$.$defineNativeClass('XPathException', ["message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', [], {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('Worker', [], {
 get$id: function() {
return this.id;
},
 postMessage$1: function(msg) {
return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', [], {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 298 dynamic classes.
// 320 classes
// 28 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v3/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v4/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v5/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v6/*class(_SVGElementImpl)*/ = [v2/*class(_SVGTextContentElementImpl)*/,v3/*class(_SVGGradientElementImpl)*/,v4/*class(_SVGComponentTransferFunctionElementImpl)*/,v5/*class(_SVGAnimationElementImpl)*/,v2/*class(_SVGTextContentElementImpl)*/,v3/*class(_SVGGradientElementImpl)*/,v4/*class(_SVGComponentTransferFunctionElementImpl)*/,v5/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v7/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v8/*class(_ElementImpl)*/ = [v6/*class(_SVGElementImpl)*/,v7/*class(_MediaElementImpl)*/,v6/*class(_SVGElementImpl)*/,v7/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v9/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v10/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v11/*class(_CharacterDataImpl)*/ = 'CharacterData|Text|CDATASection|CDATASection|Comment|Text|CDATASection|CDATASection|Comment';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v2/*class(_SVGTextContentElementImpl)*/],
    ['IDBRequest', 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest'],
    ['HTMLMediaElement', v7/*class(_MediaElementImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['SVGGradientElement', v3/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v4/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v5/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v6/*class(_SVGElementImpl)*/],
    ['Element', v8/*class(_ElementImpl)*/],
    ['HTMLDocument', v9/*class(_DocumentImpl)*/],
    ['DocumentFragment', v10/*class(_DocumentFragmentImpl)*/],
    ['CharacterData', v11/*class(_CharacterDataImpl)*/],
    ['Node', [v8/*class(_ElementImpl)*/,v9/*class(_DocumentImpl)*/,v10/*class(_DocumentFragmentImpl)*/,v11/*class(_CharacterDataImpl)*/,v8/*class(_ElementImpl)*/,v9/*class(_DocumentImpl)*/,v10/*class(_DocumentFragmentImpl)*/,v11/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr'].join('|')],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['UIEvent', 'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|MouseEvent|WheelEvent|WheelEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|MouseEvent|WheelEvent|WheelEvent|KeyboardEvent|CompositionEvent'],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['WorkerContext', 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext'],
    ['CSSValueList', 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue'],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  for (var cls in collectedClasses) {
    if (Object.prototype.hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    if (finishedClasses[cls]) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=Unit_Tests.dart.js.map